---

`src\pages\api\guestbook.ts`:
```
import type { APIRoute } from "astro";
import { supabase } from "../../lib/supabase";

export const GET: APIRoute = async () => {
  const { data, error } = await supabase
    .from("guestbook")
    .select("*")
    .order("created_at", { ascending: true });

  if (error) {
    return new Response(
      JSON.stringify({
        error: error.message,
      }),
      { status: 500 },
    );
  }

  return new Response(JSON.stringify(data));
};

export const POST: APIRoute = async ({ request }) => {
  const { name, message } = await request.json();
  const { data, error } = await supabase
    .from("guestbook")
    .insert({ name, message })
    .select();

  if (error) {
    return new Response(
      JSON.stringify({
        error: error.message,
      }),
      { status: 500 },
    );
  }

  return new Response(JSON.stringify(data));
};

```

---

`src\pages\api\auth\signout.ts`:
```
import type { APIRoute } from "astro";

export const GET: APIRoute = async ({ cookies, redirect }) => {
  cookies.delete("sb-access-token", { path: "/" });
  cookies.delete("sb-refresh-token", { path: "/" });
  return redirect("/signin");
};

```

---

`src\pages\register.astro`:
```
---
import Base from "../layout/Base.astro";
const title = "Register";
---

<Base title={title}>
  <main>
    <section>
      <h1>{title}</h1>
      <p>
        Already have an account? <a href="/signin">Sign in</a>
      </p>
      <form action="/api/auth/register" method="post">
        <div>
          <label for="email">Email</label>
          <input id="email" type="email" name="email" />
        </div>
        <div>
          <label for="password">Password</label>
          <input id="password" type="password" name="password" />
        </div>
        <button type="submit">Register</button>
      </form>
    </section>
  </main>
</Base>
```

---

`src\pages\signin.astro`:
```
---
import Base from "../layout/Base.astro";
const title = "Sign in";
---

<Base title={title}>
  <main>
    <section>
      <h1>{title}</h1>
      <p>
        New to demo? <a href="/register">Create an account</a>
      </p>
      <form action="/api/auth/signin" method="post">
        <div>
          <label for="email">Email</label>
          <input id="email" type="email" name="email" />
        </div>
        <label for="password">Password</label>
        <input id="password" type="password" name="password" />
        <button type="submit">Sign In</button>
      </form>
      <hr />
      <p>Or with</p>
      <form action="/api/auth/signin" method="post">
        <button value="github" name="provider" type="submit">
           Sign in with GitHub
        </button>
        <button value="google" name="provider" type="submit">
           Sign in with Google
        </button>
      </form>
    </section>
  </main>
</Base>
```

---

`src\pages\api\auth\callback.ts`:
```
import type { APIRoute } from "astro";
import { supabase } from "../../../lib/supabase";

export const GET: APIRoute = async ({ url, cookies, redirect }) => {
  const authCode = url.searchParams.get("code");

  if (!authCode) {
    return new Response("No code provided", { status: 400 });
  }

  const { data, error } = await supabase.auth.exchangeCodeForSession(authCode);

  if (error) {
    return new Response(error.message, { status: 500 });
  }

  const { access_token, refresh_token } = data.session;

  cookies.set("sb-access-token", access_token, {
    path: "/",
    secure: true,
    httpOnly: true,
  });
  cookies.set("sb-refresh-token", refresh_token, {
    path: "/",
    secure: true,
    httpOnly: true,
  });
  return redirect("/dashboard");
};

```

---

`src\types.ts`:
```
// src/types.ts
export interface GuestbookEntry {
    name: string;
    message: string;
  }
```

---

`src\middleware\index.ts`:
```
import { defineMiddleware } from "astro:middleware";
import { supabase } from "../lib/supabase";
import micromatch from "micromatch";

const protectedRoutes = ["/dashboard(|/)"];
const redirectRoutes = ["/signin(|/)", "/register(|/)"];
const proptectedAPIRoutes = ["/api/guestbook(|/)"];

export const onRequest = defineMiddleware(
  async ({ locals, url, cookies, redirect }, next) => {
    if (micromatch.isMatch(url.pathname, protectedRoutes)) {
      const accessToken = cookies.get("sb-access-token");
      const refreshToken = cookies.get("sb-refresh-token");

      if (!accessToken || !refreshToken) {
        return redirect("/signin");
      }

      const { data, error } = await supabase.auth.setSession({
        refresh_token: refreshToken.value,
        access_token: accessToken.value,
      });

      if (error) {
        cookies.delete("sb-access-token", {
          path: "/",
        });
        cookies.delete("sb-refresh-token", {
          path: "/",
        });
        return redirect("/signin");
      }

      locals.email = data.user?.email!;
      cookies.set("sb-access-token", data?.session?.access_token!, {
        sameSite: "strict",
        path: "/",
        secure: true,
      });
      cookies.set("sb-refresh-token", data?.session?.refresh_token!, {
        sameSite: "strict",
        path: "/",
        secure: true,
      });
    }

    if (micromatch.isMatch(url.pathname, redirectRoutes)) {
      const accessToken = cookies.get("sb-access-token");
      const refreshToken = cookies.get("sb-refresh-token");

      if (accessToken && refreshToken) {
        return redirect("/dashboard");
      }
    }

    if (micromatch.isMatch(url.pathname, proptectedAPIRoutes)) {
      const accessToken = cookies.get("sb-access-token");
      const refreshToken = cookies.get("sb-refresh-token");

      // Check for tokens
      if (!accessToken || !refreshToken) {
        return new Response(
          JSON.stringify({
            error: "Unauthorized",
          }),
          { status: 401 },
        );
      }

      // Verify the tokens
      const { error } = await supabase.auth.setSession({
        access_token: accessToken.value,
        refresh_token: refreshToken.value,
      });

      if (error) {
        return new Response(
          JSON.stringify({
            error: "Unauthorized",
          }),
          { status: 401 },
        );
      }
    }

    return next();
  },
);

```

---

`astro.config.mjs`:
```
import { defineConfig } from 'astro/config';
import netlify from '@astrojs/netlify';

export default defineConfig({
  output: 'server',
  adapter: netlify({
    edgeMiddleware: false,
  }),
});
```

---

`src\pages\api\auth\signin.ts`:
```
import type { APIRoute } from "astro";
import { supabase } from "../../../lib/supabase";
import type { Provider } from "@supabase/supabase-js";

export const POST: APIRoute = async ({ request, cookies, redirect }) => {
  const formData = await request.formData();
  const email = formData.get("email")?.toString();
  const password = formData.get("password")?.toString();
  const provider = formData.get("provider")?.toString();

  if (provider) {
    const { data, error } = await supabase.auth.signInWithOAuth({
      provider: provider as Provider,
      options: {
        redirectTo: import.meta.env.DEV
          ? "http://localhost:4321/api/auth/callback"
          : "https://faraidacademy.netlify.app/api/auth/callback",
      },
    });

    if (error) {
      return new Response(error.message, { status: 500 });
    }

    return redirect(data.url);
  }

  if (!email || !password) {
    return new Response("Email and password are required", { status: 400 });
  }

  const { data, error } = await supabase.auth.signInWithPassword({
    email,
    password,
  });

  if (error) {
    return new Response(error.message, { status: 500 });
  }

  const { access_token, refresh_token } = data.session;
  cookies.set("sb-access-token", access_token, {
    sameSite: "strict",
    path: "/",
    secure: true,
  });
  cookies.set("sb-refresh-token", refresh_token, {
    sameSite: "strict",
    path: "/",
    secure: true,
  });

  return redirect("/dashboard");
};

```

---

`src\pages\dashboard.astro`:
```
---
import Base from "../layout/Base.astro";
import { supabase } from "../lib/supabase";
import type { GuestbookEntry } from "../types";

const { email } = Astro.locals;

// Fetch data ONLY ONCE here
const { data, error } = (await supabase
  .from("guestbook")
  .select("name, message")
  .order("created_at", { ascending: false })) as { data: GuestbookEntry[], error: any };

  if (error) {
      console.log(error)
      return new Response('Error fetching data', { status: 500});
  }
---

<Base title="Dashboard">
  <section>
    <p>{email}</p>
    <p>This is a protected page.</p>
    <a href="/api/auth/signout">Sign out</a>
    {data && data.map(entry => (
        <div>
            <h3>{entry.name}</h3>
            <p>{entry.message}</p>
        </div>
    ))}
  </section>
</Base>
```

---

`src\pages\api\auth\register.ts`:
```
import type { APIRoute } from "astro";
import { supabase } from "../../../lib/supabase";

export const POST: APIRoute = async ({ request, redirect }) => {
  const formData = await request.formData();
  const email = formData.get("email")?.toString();
  const password = formData.get("password")?.toString();

  if (!email || !password) {
    return new Response("Email and password are required", { status: 400 });
  }
if (password.length < 8) {
    return new Response("Password must be at least 8 characters long", { status: 400 });
}

  const { error } = await supabase.auth.signUp({
    email,
    password,
  });

  if (error) {
    // Provide more user-friendly error messages
    let errorMessage = "An error occurred during registration.";
    if (error.message.includes("already registered")) {
      errorMessage = "This email address is already registered.";
    } else if (error.message.includes("Password")) {
      errorMessage = "Invalid password. Please choose a stronger password.";
    }
    return new Response(errorMessage, { status: 500 });
  }

  return redirect("/signin");
};
```

---

`src\lib\supabase.ts`:
```
import { createClient } from "@supabase/supabase-js";

export const supabase = createClient(
  import.meta.env.SUPABASE_URL,
  import.meta.env.SUPABASE_ANON_KEY,
  {
    auth: {
      flowType: "pkce",
      autoRefreshToken: false,
      detectSessionInUrl: false,
      persistSession: true,
    },
  },
);

```

---

`src\pages\index.astro`:
```
---
import Base from "../layout/Base.astro";
import { supabase } from "../lib/supabase";

// Check for existing session
const accessToken = Astro.cookies.get("sb-access-token");
const refreshToken = Astro.cookies.get("sb-refresh-token");

let isLoggedIn = false;

if (accessToken && refreshToken) {
  const { data } = await supabase.auth.setSession({
    refresh_token: refreshToken.value,
    access_token: accessToken.value,
  });

  if (data?.user) {
    isLoggedIn = true;
  }
}
---

<Base title="Home">
  <h1>Welcome</h1>
  {
    isLoggedIn ? (
      <p>
        You are logged in. <a href="/dashboard">Go to Dashboard</a>
      </p>
    ) : (
      <p>
        <a href="/signin">Sign in</a> or <a href="/register">Register</a> to
        access the dashboard.
      </p>
    )
  }
</Base>

```

---