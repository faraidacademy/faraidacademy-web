---

`src\pages\api\auth\callback.ts`:
```
// src/pages/api/auth/callback.ts
import type { APIRoute } from "astro";
import { supabase } from "../../../lib/supabase";

export const GET: APIRoute = async ({ url, cookies, redirect }) => {
  const authCode = url.searchParams.get("code");

  if (!authCode) {
    return new Response("No code provided", { status: 400 });
  }

  const { data, error } = await supabase.auth.exchangeCodeForSession(authCode);

  if (error) {
    return new Response(error.message, { status: 500 });
  }

  const { access_token, refresh_token } = data.session;

  cookies.set("sb-access-token", access_token, {
    path: "/",
    secure: true,
    httpOnly: true,
  });
  cookies.set("sb-refresh-token", refresh_token, {
    path: "/",
    secure: true,
    httpOnly: true,
  });

  // Create a new URL object for the /dashboard page
  const redirectUrl = new URL('/dashboard', url.origin);

  // Redirect to the cleaned URL
  return redirect(redirectUrl.toString());
};
```

---

`src\layout\Base.astro`:
```
---
interface Props {
  title: string;
}

const { title } = Astro.props;
import '@fontsource-variable/open-sans';
---

<style is:global>
  body {
    font-family: "Open Sans", sans-serif;
    font-size: 1rem;
  }
</style>

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <title>{title}</title>
    <meta name="viewport" content="width=device-width" />
  </head>
  <body>
    <slot />
  </body>
</html>

```

---

`src\types.ts`:
```
// src/types.ts
export interface GuestbookEntry {
    name: string;
    message: string;
  }
```

---

`src\pages\dashboard.astro`:
```
---
// src/pages/dashboard.astro
import Base from "../layout/Base.astro";

const { email } = Astro.locals;
---

<Base title="Dashboard">
  <section>
    <p>{email}</p>
    <p>This is a protected page.</p>
    <a href="/api/auth/signout">Sign out</a>
  </section>
</Base>
```

---

`src\pages\index.astro`:
```
---
// src/pages/index.astro
import Base from "../layout/Base.astro";
import { checkAndSetSession } from '../lib/auth';

const isLoggedIn = await checkAndSetSession(Astro.cookies);

---

<Base title="Home">
  <h1>Welcome</h1>
  {
    isLoggedIn ? (
      <p>
        You are logged in. <a href="/dashboard">Go to Dashboard</a>
      </p>
    ) : (
      <p>
        <a href="/signin">Sign in</a> to access the dashboard.
      </p>
    )
  }
</Base>
---

`src\env.d.ts`:
```
// src/env.d.ts
/// <reference path="../.astro/types.d.ts" />
/// <reference types="astro/client" />
declare namespace App {
  interface Locals {
    email: string;
  }
}
```

---

`src\lib\auth.ts`:
```
// src/lib/auth.ts (CORRECTED)
import type { AstroCookies } from "astro";
import { supabase } from "./supabase";

export function setAuthCookies(
  cookies: AstroCookies,
  access_token: string,
  refresh_token: string,
) {
  cookies.set("sb-access-token", access_token, {
    sameSite: "strict",
    path: "/",
    secure: true,
    httpOnly: true,
  });
  cookies.set("sb-refresh-token", refresh_token, {
    sameSite: "strict",
    path: "/",
    secure: true,
    httpOnly: true,
  });
}

export function clearAuthCookies(cookies: AstroCookies) {
  cookies.delete("sb-access-token", { path: "/" });
  cookies.delete("sb-refresh-token", { path: "/" });
}

export async function checkAndSetSession(cookies: AstroCookies, locals?: App.Locals) { // Use App.Locals
  const accessToken = cookies.get("sb-access-token");
  const refreshToken = cookies.get("sb-refresh-token");

  if (!accessToken || !refreshToken) {
    return false;
  }

  const { data, error } = await supabase.auth.setSession({
    refresh_token: refreshToken.value,
    access_token: accessToken.value,
  });

  if (error) {
    clearAuthCookies(cookies);
    return false;
  }

  if (locals) {
    locals.email = data.user?.email ?? "";  // Use optional chaining and nullish coalescing
  }

  if (data?.session?.access_token && data?.session?.refresh_token) {
    setAuthCookies(cookies, data.session.access_token, data.session.refresh_token);
  }
  return true;
}
```

---

`src\pages\api\auth\signout.ts`:
```
// src/pages/api/auth/signout.ts
import type { APIRoute } from "astro";
import { clearAuthCookies } from "../../../lib/auth"; // Import

export const GET: APIRoute = async ({ cookies, redirect }) => {
  clearAuthCookies(cookies); // Use helper
  return redirect("/signin");
};
```

---

`src\pages\api\auth\register.ts`:
```
// src/pages/api/auth/register.ts
import type { APIRoute } from "astro";
import { supabase } from "../../../lib/supabase";
import { AuthError } from "@supabase/supabase-js";

// Helper for auth errors
function handleAuthError(error: AuthError) {
    let errorMessage = "An error occurred during registration.";
    if (error.message.includes("already registered")) {
      errorMessage = "This email address is already registered.";
    } else if (error.message.includes("Password")) {
      errorMessage = "Invalid password. Please choose a stronger password.";
    }
    return new Response(errorMessage, { status: 500 });
}

export const POST: APIRoute = async ({ request, redirect }) => {
  const formData = await request.formData();
  const email = formData.get("email")?.toString();
  const password = formData.get("password")?.toString();

  if (!email || !password) {
    return new Response("Email and password are required", { status: 400 });
  }
  if (password.length < 8) {
    return new Response("Password must be at least 8 characters long", { status: 400 });
  }

  const { error } = await supabase.auth.signUp({
    email,
    password,
    options: { // Add the options object
      emailRedirectTo: import.meta.env.DEV
        ? "http://localhost:4321/signin?message=confirm-email" // Redirect to signin page with a query parameter
        : "https://faraidacademy.netlify.app/signin?message=confirm-email", // For production, adjust the URL
    },
  });

  if (error) {
    return handleAuthError(error);
  }

  return redirect("/signin?message=confirm-email"); // Redirect to signin, passing a success message
};
```

---

`src\lib\supabase.ts`:
```
import { createClient } from "@supabase/supabase-js";

export const supabase = createClient(
  import.meta.env.SUPABASE_URL,
  import.meta.env.SUPABASE_ANON_KEY,
  {
    auth: {
      flowType: "pkce",
      autoRefreshToken: true,
      detectSessionInUrl: false,
      persistSession: true,
    },
  },
);
```

---

`src\middleware\index.ts`:
```
// src/middleware/index.ts
import { defineMiddleware } from "astro:middleware";
import micromatch from "micromatch";
import { checkAndSetSession } from "../lib/auth"; // Import helper
import { supabase } from "../lib/supabase";
// ... (rest of imports) ...

const protectedRoutes = ["/dashboard(|/)"];
const redirectRoutes = ["/signin(|/)", "/register(|/)"];
const proptectedAPIRoutes = ["/api/guestbook(|/)"];

export const onRequest = defineMiddleware(
  async ({ locals, url, cookies, redirect }, next) => {
    if (micromatch.isMatch(url.pathname, protectedRoutes)) {
        const isLoggedIn = await checkAndSetSession(cookies, locals); //Use helper
      if (!isLoggedIn) {
        return redirect("/signin");
      }
    }

    if (micromatch.isMatch(url.pathname, redirectRoutes)) {
      const isLoggedIn = await checkAndSetSession(cookies);  // Use helper
      if (isLoggedIn) {
        return redirect("/dashboard");
      }
    }
    if (micromatch.isMatch(url.pathname, proptectedAPIRoutes)) {
      const accessToken = cookies.get("sb-access-token");
      const refreshToken = cookies.get("sb-refresh-token");

      // Check for tokens
      if (!accessToken || !refreshToken) {
        return new Response(
          JSON.stringify({
            error: "Unauthorized",
          }),
          { status: 401 },
        );
      }

      // Verify the tokens
      const { error } = await supabase.auth.setSession({
        access_token: accessToken.value,
        refresh_token: refreshToken.value,
      });

      if (error) {
        return new Response(
          JSON.stringify({
            error: "Unauthorized",
          }),
          { status: 401 },
        );
      }
    }

    return next();
  },
);
```

---

`src\pages\api\guestbook.ts`:
```
// src/pages/api/guestbook.ts
import type { APIRoute } from "astro";
import { supabase } from "../../lib/supabase";
import type { PostgrestError } from "@supabase/supabase-js";

// Helper function to handle Supabase errors
function handleSupabaseError(error: PostgrestError) {
  return new Response(
    JSON.stringify({
      error: error.message,
    }),
    { status: 500 },
  );
}

export const GET: APIRoute = async () => {
  const { data, error } = await supabase
    .from("guestbook")
    .select("*")
    .order("created_at", { ascending: true });

  if (error) {
    return handleSupabaseError(error); // Use the helper
  }

  return new Response(JSON.stringify(data));
};

export const POST: APIRoute = async ({ request }) => {
  const { name, message } = await request.json();
  const { data, error } = await supabase
    .from("guestbook")
    .insert({ name, message })
    .select();

  if (error) {
    return handleSupabaseError(error); // Use the helper
  }

  return new Response(JSON.stringify(data));
};
```

---

`src\pages\api\auth\signin.ts`:
```
// src/pages/api/auth/signin.ts
import type { APIRoute } from "astro";
import { supabase } from "../../../lib/supabase";
import type { Provider } from "@supabase/supabase-js";

export const POST: APIRoute = async ({ request, redirect }) => {
  const formData = await request.formData();
  const provider = formData.get("provider")?.toString();

  if (provider) {
    const { data, error } = await supabase.auth.signInWithOAuth({
      provider: provider as Provider,
      options: {
        redirectTo: import.meta.env.DEV
          ? "http://localhost:4321/api/auth/callback"
          : "https://faraidacademy.netlify.app/api/auth/callback",
      },
    });

    if (error) {
      return new Response(error.message, { status: 500 });
    }

    return redirect(data.url);
  }

  return new Response("Provider required", { status: 400 });
};
```

---

`src\components\AuthForm.astro`:
```
---
// src/components/AuthForm.astro
interface Props {
  showProviderButtons?: boolean;
}

const { showProviderButtons = false } = Astro.props;
---

{
  showProviderButtons && (
    <>
      <p>Sign in with</p>
      <form action="/api/auth/signin" method="post">
        <button value="google" name="provider" type="submit">
          Sign in with Google
        </button>
      </form>
    </>
  )
}
```

---

`src\pages\signin.astro`:
```
---
// src/pages/signin.astro
import Base from "../layout/Base.astro";
import AuthForm from "../components/AuthForm.astro";
const title = "Sign in";

---

<Base title={title}>
  <main>
    <section>
      <h1>{title}</h1>
      <AuthForm showProviderButtons />
    </section>
  </main>
</Base>
```

---