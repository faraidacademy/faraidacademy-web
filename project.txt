---

`astro.config.mjs`:
```
import { defineConfig } from 'astro/config';
import netlify from '@astrojs/netlify';

import sitemap from '@astrojs/sitemap';

import icon from 'astro-icon';

export default defineConfig({
  image: {
    domains: ["googleusercontent.com"],
  },
  output: 'server',

  adapter: netlify({
    edgeMiddleware: false,
  }),

  integrations: [sitemap(), icon({
    include: {
      "material-symbols": ["*"],
    },
  }),],
});
```
---

`tsconfig.json`:
```
{
  "extends": "astro/tsconfigs/strict",
  "include": [".astro/types.d.ts", "**/*"],
  "exclude": ["dist"]
}

```
---

`src/env.d.ts`:
```
// env.d.ts
declare namespace App {
  interface Locals {
    email: string;
    name: string;
    avatar_url: string;
    userId: string;
    createdAt: string;
    school: string | undefined;
    phone: string | undefined;
    is_participant: boolean | undefined;
    is_visible: boolean | undefined;
  }
}
```
---

`src/types.ts`:
```
// src/types.ts
export interface Question {
  id: number;
  question: string;
  money: number | null;
  case: string | null;
}

export interface Answer {
  id: number;
  question_id: number;
  answer: number;
}
```
---

`src/components/AuthForm.astro`:
```
---
// src/components/AuthForm.astro
import LoginWithGoogleButton from './LoginWithGoogleButton.astro';

interface Props {
  showProviderButtons?: boolean;
}

const { showProviderButtons = false } = Astro.props;
---

{
  showProviderButtons && (
    <LoginWithGoogleButton buttonText="Log in with Google" />
  )
}

<script>
    import "material/button/text-button";
</script>

<style>
  .button{
        font-family: "Open Sans", sans-serif;
    }
</style>
```
---

`src/components/CompetitionAnnouncement.astro`:
```
---
import { Icon } from "astro-icon/components";
import Countdown from "./Countdown.astro";
import LoginWithGoogleButton from './LoginWithGoogleButton.astro';

interface Props {
    isLoggedIn: boolean;
    isParticipant?: boolean;
}

const { isLoggedIn, isParticipant = false } = Astro.props;
---

<md-outlined-card class="card col" id="competition-card">
        <Icon id="close-button" class="close-button" name="material-symbols:close-rounded" size="1em" />
    <div class="main col">
        <Icon name="trophy2" size="3em" />
        Faraid Competition 2025
    </div>
    <div class="col">
        <p>Pendaftaran ditutup dalam:</p>
        <Countdown targetTime="June 25, 2025 00:00:00 GMT+0000" />
    </div>
    {
        isLoggedIn ? (
            isParticipant ? (
                <md-filled-button href="/competition">VIEW COMPETITION</md-filled-button>
            ) : (
                <md-filled-button id="announcement-join-button">JOIN COMPETITION</md-filled-button>
            )
        ) : (
            <LoginWithGoogleButton buttonType="filled" buttonText="JOIN" />
        )
    }
</md-outlined-card>

<script>
    import "material/button/filled-button";
    import "material/card/outlined-card";
    import "material/card/elevated-card";
    import "material/card/filled-card";

    document.addEventListener('DOMContentLoaded', () => {
        const closeButton = document.getElementById("close-button");
        const card = document.getElementById("competition-card");
        const joinButton = document.getElementById("announcement-join-button");
        if (closeButton && card) {
            closeButton.addEventListener("click", () => {
                card.style.display = card.style.display === "none" ? "" : "none";
            });
        }
        if (joinButton) {
            joinButton.addEventListener("click", async (e) => {
                e.preventDefault();
                (joinButton as HTMLButtonElement).disabled = true;
                try {
                    const response = await fetch("/api/profile", {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify({ is_participant: true })
                    });
                    if (!response.ok) {
                        const errorData = await response.json();
                        alert(errorData.error || "Failed to join competition");
                        (joinButton as HTMLButtonElement).disabled = false;
                        return;
                    }
                    window.location.href = "/competition";
                } catch (err) {
                    alert("An unexpected error occurred.");
                    (joinButton as HTMLButtonElement).disabled = false;
                }
            });
        }
    });

</script>

<style>
    .card {
        position: relative;
        padding: 1em;
        font-size: 1.3em;
        text-align: center;
        gap: 0.5em;
        font-weight: 500;
        backdrop-filter: blur(1px);
        max-width: 90%;
        min-width: 80%;
        justify-content: space-between;
        --_container-shape: 28px;
        --_container-color: var(--md-sys-color-surface-variant);
        backdrop-filter: blur(4px);
    }

    .main {
        gap: 0.5em;
        font-weight: 600;
    }

    .card > .col p {
        font-size: 0.5em;
        opacity: 0.5;
    }

    .close-button {
        position: absolute;
        top: 0.7em;
        right: 0.7em;
        background: none;
        border: none;
        cursor: pointer;
        padding: 0;
        z-index: 10;
        color: var(--md-sys-color-on-surface-variant);
        opacity: 0.5;
    }

    @media (min-width: 600px) {
        .card {
            flex-direction: row;
            align-items: center;
            gap: 1em;
        }

        .main {
            flex-direction: row;
            align-items: center;
        }
    }
</style>
```
---

`src/components/Countdown.astro`:
```
---
interface Props {
  targetTime: string;
  format?: "dhms" | "colon";
}

const { targetTime, format = "dhms" } = Astro.props;

const targetDate: Date = new Date(targetTime);
const targetTimestamp: number = targetDate.getTime();

if (isNaN(targetTimestamp)) {
  console.error("Invalid targetTime prop:", targetTime);
}

---

{ !isNaN(targetTimestamp) && (
  <p class="countdown" data-target={targetTimestamp} data-format={format}>
    <span class="countdown-text"></span>
  </p>
)}

<style>
  .countdown {
    font-size: 0.7em;
  }
</style>

<script>
  function updateCountdown(countdownElement: HTMLParagraphElement) {
      if (!countdownElement) {
        return;
      }

    const targetTimestamp = parseInt(countdownElement.dataset.target || '0', 10);
    const countdownTextSpan = countdownElement.querySelector('.countdown-text') as HTMLSpanElement;
    const format = countdownElement.dataset.format || "dhms";

    if (isNaN(targetTimestamp)) {
          console.error("Invalid targetTimestamp:", countdownElement.dataset.target);
          countdownTextSpan.textContent = 'Invalid date';
          return;
    }

    const now: number = new Date().getTime();
    const timeLeft: number = targetTimestamp - now;

    if (timeLeft <= 0) {
      countdownTextSpan.textContent = 'Countdown finished!';
      return;
    }

    const days: number = Math.floor(timeLeft / (1000 * 60 * 60 * 24));
    const hours: number = Math.floor((timeLeft % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
    const minutes: number = Math.floor((timeLeft % (1000 * 60 * 60)) / (1000 * 60));
    const seconds: number = Math.floor((timeLeft % (1000 * 60)) / 1000);

    let countdownString: string = "";

    if (format === "colon") {
      if (days > 0) {
        countdownString += `${days}:`;
      }
      if (days > 0 || hours > 0) {
        countdownString += `${String(hours).padStart(2, '0')}:`;
      }
      countdownString += `${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;
    } else { // dhms format
       if (days > 0) {
          countdownString += `${days}d `;
        }
        if (days > 0 || hours > 0) {
          countdownString += `${hours}h `;
        }
        if (days > 0 || hours > 0 || minutes > 0) {
          countdownString += `${minutes}m `;
        }
        countdownString += `${seconds}s`;
    }



    countdownTextSpan.textContent = countdownString;
    setTimeout(() => updateCountdown(countdownElement), 1000);
  }


  document.addEventListener('astro:page-load', () => {
      const countdownElements = document.querySelectorAll('.countdown');
      countdownElements.forEach(countdownElement => {
        updateCountdown(countdownElement as HTMLParagraphElement);
      });
  });
</script>
```
---

`src/components/Footer.astro`:
```
---
import { Icon } from "astro-icon/components";

const socialMedia = [
    { name: "fa6-brands:square-twitter", url: "https://x.com/" },
    { name: "fa6-brands:square-facebook", url: "https://facebook.com/" },
    { name: "fa6-brands:square-whatsapp", url: "https://wa.me/966558066420" },
    { name: "fa6-brands:telegram", url: "https://t.me/966558066420" },
];
---

<footer class="col">
    <div class="icons">
        {
            socialMedia.map((social) => (
                <a
                    href={social.url}
                    target="_blank"
                    rel="noopener noreferrer"
                    aria-label={`Link to our ${social.name.split(":")[1]} page`}
                >
                    <Icon name={social.name} size={12} />
                </a>
            ))
        }
    </div>
    <div class="copy">&copy; 2025, Faraid Academy. All rights reserved.</div>
</footer>

<style>
    footer {
        position: absolute;
        bottom: 0;
        padding: 0.5em;
        opacity: 0.5;
    }
    .icons {
        display: flex;
        gap: 0.5em;
    }
    .icons a {
        color: inherit;
        text-decoration: none;
        transition: color 0.2s ease;
        display: inline-block;
    }
    .icons a:hover {
        color: #007bff;
        transform: scale(1.1);
    }

    .copy{
        font-size:0.5em;
    }
</style>

```
---

`src/components/Form.astro`:
```
---
// src/components/Form.astro
import { Icon } from "astro-icon/components";

//Form.astro
interface Props {
    userName?: string;
    userSchool?: string;
    userPhone?: string;
    userGender?: string;
    userIsVisible?: boolean;
}

const {
    userName = "",
    userSchool = "",
    userPhone = "",
    userGender = "",
    userIsVisible = false,
} = Astro.props;
---

<md-dialog class="dialog" id="edit-profile">
    <div slot="headline">
        <Icon name="material-symbols:edit-square-rounded" /> Edit Profil
    </div>

    <form slot="content" id="form-id" method="dialog">
        <md-outlined-text-field
            label="Nama Lengkap"
            required
            minlength="4"
            value={userName}
            name="name"><Icon name="material-symbols:person-rounded" slot="leading-icon" /></md-outlined-text-field>
        <md-outlined-text-field
            label="Universitas/Sekolah"
            required
            minlength="4"
            value={userSchool}
            name="school"><Icon name="material-symbols:school-rounded" slot="leading-icon" /></md-outlined-text-field>
        <md-outlined-text-field
            label="Nomor Telefon"
            required
            minlength="4"
            type="tel"
            value={userPhone}
            name="phone"><Icon name="material-symbols:phone-in-talk-rounded" slot="leading-icon" />
        </md-outlined-text-field>

            <div class="gender row">
                <div class="row">
                    <md-radio id="male-radio" name="gender" value="male" checked={userGender === 'male'}></md-radio>
                    <label for="male-radio">Male</label>
                </div>
                <div class="row">
                    <md-radio id="female-radio" name="gender" value="female" checked={userGender === 'female'}></md-radio>
                    <label for="female-radio">Female</label>
                </div>
            </div>
<md-divider></md-divider>

        <label>
            <md-checkbox
                name="is_visible"
                touch-target="wrapper"
                checked={userIsVisible}
                value="true"
            >
            </md-checkbox><span>Tampilkan nama Anda di daftar peserta</span>
        </label>
    </form>

    <div slot="actions">
        <md-filled-button form="form-id" id="submit-button"
            >SIMPAN</md-filled-button
        >
    </div>

</md-dialog>

<script>
    import "material/textfield/outlined-text-field";
    import "material/button/filled-button";
    import "material/dialog/dialog";
    import "material/checkbox/checkbox";
    import "material/radio/radio";
    import "material/divider/divider"

    const submitButton = document.getElementById("submit-button");
    const form = document.getElementById("form-id") as HTMLFormElement;
    const dialog = document.querySelector("#edit-profile") as any;

    const submitProfileForm = async (event: Event) => {
        event.preventDefault();

        const name = (form.querySelector('[name="name"]') as HTMLInputElement)
            .value;
        const school = (
            form.querySelector('[name="school"]') as HTMLInputElement
        ).value;
        const phone = (form.querySelector('[name="phone"]') as HTMLInputElement)
            .value;
        const isVisible =
            (form.querySelector('[name="is_visible"]') as HTMLInputElement)
                ?.checked || false;
        const genderElement = form.querySelector('[name="gender"]:checked') as HTMLInputElement;
        const gender = genderElement ? genderElement.value : '';
        console.log("Gender:", gender)

        if (!form.checkValidity()) {
            form.reportValidity();
            return;
        }

        try {
            const response = await fetch("/api/profile", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify({
                    name,
                    school,
                    phone,
                    gender,
                    is_visible: isVisible,
                }),
            });

            if (!response.ok) {
                const errorData = await response.json();
                alert(
                    `Error updating profile: ${errorData.error} - ${errorData.details}`,
                );
                return;
            }

            dialog.close();
            window.location.reload();
        } catch (error) {
            console.error("Error updating profile:", error);
            alert("An unexpected error occurred.");
        }
    };

    if (submitButton) {
        submitButton.addEventListener("click", submitProfileForm);
    }
</script>

<style>
    .dialog {
        flex-direction: column;
        margin: auto;
        height: min-content;
        position: absolute;
    }

    #form-id {
        display: flex;
        flex-direction: column;
        gap: 1em;
    }

    label{
        display: flex;
        align-items: center;
        gap: 0.5em;
    }

    label span strong {
        display: inline;
        text-wrap: pretty;
    }

    label{
        padding: 5px;
    }

    .competition-checkbox{
        padding: 5px;
        background-color: var(--md-sys-color-primary-container);
        color: var(--md-sys-color-on-primary-container);
        border-radius: 8px;
    }

    .gender{
                justify-content: space-between;
            }
</style>
```
---

`src/components/Header.astro`:
```
---
import "@fontsource-variable/eb-garamond";
import { Icon } from "astro-icon/components";
import { Image } from "astro:assets";
import ThemeIcon from "./ThemeIcon.astro";
import Navbar from "./Navbar.astro";
import NavStrip from "./NavStrip.astro";
import LoginWithGoogleButton from './LoginWithGoogleButton.astro';

interface Props {
    isLoggedIn: boolean;
}

const { isLoggedIn } = Astro.props;
const { avatar_url, name } = Astro.locals;
---

<header>
    <a href="/">
        <div class="main">
            <Icon name="Logo" size="1.5em" />
            <h1>FaraidAcademy</h1>
        </div>
    </a>
    <div class="nav row">
        <NavStrip />
        <ThemeIcon />
		
        {
            isLoggedIn ? (
                avatar_url ? (
                    <a href="/dashboard">
                        <Image
                            class="avatar"
                            src={avatar_url}
                            alt={name ? `${name}'s avatar` : "User Avatar"}
                            width={32}
                            height={32}
                            format="webp"
                        />
                    </a>
                ) : (
                    <a href="/dashboard">Dashboard</a>
                )
            ) : (
                <LoginWithGoogleButton buttonText="LOGIN" />
            )
        }
        <Navbar />
    </div>
</header>

<script>
    import "material/button/text-button";
</script>

<style>
    header {
        font-family: "EB Garamond Variable", serif;
        display: flex;
        flex-direction: row;
        align-items: center;
        gap: 0.3em;
        position: fixed;
        top: 0;
        padding: 1em;
        justify-content: space-between;
        width: 100%;
        background-color: transparent;
        z-index: 100;
    }


    .main {
        display: flex;
        flex-direction: row;
        align-items: center;
        gap: 0.5em;
        font-size: 1em;
    }

    h1 {
        font-weight: 500;
        font-size: 1em;
    }

    header a {
        display: flex;
        text-decoration: none;
        color: inherit;
        height: min-content;
    }
    .nav {
        width: min-content;
        height: min-content;
        gap: 1em;
		display: flex;
        font-size: 0.8em;
    }
    .avatar {
        border-radius: 50%;
        object-fit: cover;
        border: 2px solid var(--md-sys-color-outline-variant);
    }

    .button {
        font-family: "Open Sans", sans-serif;
    }
</style>
```
---

`src/components/LoginWithGoogleButton.astro`:
```
---
interface Props {
  buttonType?: 'text' | 'filled' | 'outlined'; // Material types
  buttonText: string;
  class?: string; // Allow passing additional classes
}
const { buttonType = 'text', buttonText, class: className } = Astro.props;
---
<form action="/api/auth/signin" method="post" class:list={[className]}>
  {buttonType === 'text' && (
    <md-text-button class="button" name="provider" value="google" type="submit">
      {buttonText}
    </md-text-button>
  )}
  {buttonType === 'filled' && (
    <md-filled-button class="button" name="provider" value="google" type="submit">
      {buttonText}
    </md-filled-button>
  )}
  {buttonType === 'outlined' && (
    <md-outlined-button class="button" name="provider" value="google" type="submit">
      {buttonText}
    </md-outlined-button>
  )}
</form>

<script>
  import "material/button/text-button";
  import "material/button/filled-button";
  import "material/button/outlined-button";
</script>

<style>
.button {
  font-family: "Open Sans Variable", sans-serif;
}
form {
  display: inline-block;
}
</style>

```
---

`src/components/Navbar.astro`:
```
---
import { Icon } from "astro-icon/components";

import { links } from "../data/links";
---

<nav>
    <Icon
        name="material-symbols:menu-rounded"
        size="2em"
        id="menu-toggle"
        aria-expanded="false"
        aria-controls="nav-links"
        aria-label="Toggle navigation"
    />
    <div id="nav-links" class="hidden col">
            {
                links.map((link) => (
                        <a class="col" href={link.href}>{link.text}</a>
                ))
            }
        </ul>
    </div>
</nav>

<script>
    const menuToggle = document.getElementById("menu-toggle");
    const navLinks = document.getElementById("nav-links");

    if (menuToggle && navLinks) {
        menuToggle.addEventListener("click", () => {
            const isExpanded =
                menuToggle.getAttribute("aria-expanded") === "true";
            menuToggle.setAttribute("aria-expanded", String(!isExpanded));
            navLinks.classList.toggle("hidden");
        });
    }
</script>

<style>
    nav {
        display: flex;
        align-items: center;
        justify-content: space-between;
        width: 100%;
    }

   

    #nav-links {
        position: absolute;
        top: 100%;
        left: 0;
        width: 100%;
        background-color: var(--md-sys-color-background-variant);
        box-shadow: 0px 3px 3px rgba(0, 0, 0, 0.1);
        z-index: 1;
        transition: transform 0.3s ease-in-out;
        transform-origin: top;
        padding: 1em 0;

        font-size: 1.5em;
    }

    #nav-links.hidden {
        transform: scaleY(0);
    }

    #nav-links a {
        align-items: center;
        width: 100%;
        text-decoration: none;
        color: inherit;
        padding: 0.5em 0;
    }

    .hidden {
        display: none;
    }

    @media (min-width: 600px) {
    nav {
      display: none;
    }
  }
</style>

```
---

`src/components/NavStrip.astro`:
```
---
import { links } from "../data/links";
---

<nav>
    <div id="nav" class="row">
            {
                links.map((link) => ( 
                        <a href={link.href}>{link.text}</a>
                ))
            }
    </div>
</nav>

<style>
    #nav{
        display: none;
        font-size: 0.8em;
        gap: 1em;

    }
    #nav > a:first-child {
    font-weight: bold;
}
    a{
        font-style: none;
        color: var(--md-sys-color-on-surface);
        text-decoration: none;
    }

    @media (min-width: 600px) {
    #nav {
      display: flex;
    }
  }
</style>
```
---

`src/components/Profile.astro`:
```
---
import { Icon } from "astro-icon/components";
import { Image } from "astro:assets";
const { email, name, avatar_url, createdAt, school, phone, is_participant, is_visible } = Astro.locals;

function formatDate(dateString: string | undefined) {
  if (!dateString) {
    return "Unknown";
  }
  const date = new Date(dateString);
  return date.toLocaleDateString("id-ID", {
    weekday: "long",
    year: "numeric",
    month: "long",
    day: "numeric",
  });
}
---

<md-elevated-card class="card col">
  <div class="main col">
  {
    avatar_url && (
      <Image
        class="avatar"
        src={avatar_url}
        alt={name ? `${name}'s avatar` : "User Avatar"}
        width={64}
        height={64}
      />
    )
  }

  <div class="name-badge col">
    <p class="name">{name || email}</p>
    {is_participant && (
      <div class="badge row data">
        <Icon name="material-symbols:verified-rounded" size="1.2em" /> Peserta Kompetisi
        Faraid 2025
      </div>
    )}
  </div>
</div>

  <div class="details col">
    {
      school && (
        <p class="data school row">
          <Icon name="material-symbols:school-rounded" /> {school}
        </p>
      )
    }
    {
      phone && (
        <p class="data row">
          <Icon name="material-symbols:phone-forwarded-rounded" /> {phone}
        </p>
      )
    }
    
    <p class="data row">
      <Icon name="material-symbols:person-rounded" />
      {formatDate(createdAt)}
    </p>
    {
      !is_participant && (
        <md-filled-button id="join-competition-profile-button">
          Join Faraid Competition 2025
        </md-filled-button>
      )
    }
  </div>

  <md-text-button id="edit-profile-button"><Icon slot="icon" name="material-symbols:edit-square-rounded" /> EDIT PROFIL</md-text-button>
</md-elevated-card>

<script>
  import "material/button/text-button";
  import "material/button/filled-button";
  import "material/card/elevated-card";

  const editProfileButton = document.getElementById("edit-profile-button");
  const dialog = document.querySelector("#edit-profile") as any;

  if (editProfileButton && dialog) {
    editProfileButton.addEventListener("click", () => {
      if (typeof dialog.show === 'function') {
        dialog.show();
      } else {
        dialog.open = true;
      }
    });
  }

  document.addEventListener("astro:page-load", () => {
    const joinButton = document.getElementById("join-competition-profile-button");
    if (joinButton) {
      joinButton.addEventListener("click", async (e) => {
        e.preventDefault();
        (joinButton as HTMLButtonElement).disabled = true;
        try {
          const response = await fetch("/api/profile", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ is_participant: true })
          });
          if (!response.ok) {
            const errorData = await response.json();
            alert(errorData.error || "Failed to join competition");
            (joinButton as HTMLButtonElement).disabled = false;
            return;
          }
          window.location.reload();
        } catch (err) {
          alert("An unexpected error occurred.");
          (joinButton as HTMLButtonElement).disabled = false;
        }
      });
    }
  });
</script>

<style>
  .card {
    padding: 1.5em;
    gap: 1em;
  }

  .badge {
    font-size: 0.6em;
    padding: 5px 12px;
    color: var(--md-sys-color-on-primary-container);
    background-color: var(--md-sys-color-primary-container);
    border-radius: 999px;
  }

  .name {
    font-size: 1.5em;
    font-weight: 600;
    text-wrap: pretty;
    text-align: center;
  }

  .school{
    font-size: 1.1em;
    font-weight: 600;
  }

  .details{
    font-size: 0.7em;
  }
  .data {
    gap: 0.5em;
  }

  .avatar {
    border-radius: 50%;
    border: 2px solid var(--md-sys-color-outline-variant);
  }
  md-text-button {
    font-family: "Open Sans Variable", sans-serif;
  }

  #join-competition-profile-button {
    margin-top: 1em;
    font-weight: 600;
    background: var(--md-sys-color-primary-container);
    color: var(--md-sys-color-on-primary-container);
    border-radius: 8px;
    box-shadow: 0 2px 8px rgba(0,0,0,0.07);
  }

[data-icon]{
  color: inherit;
}

</style>
```
---

`src/components/ThemeIcon.astro`:
```
---
// src/components/ThemeIcon.astro
import { Icon } from "astro-icon/components";
---

<button id="themeToggle" aria-label="Toggle Theme">
  <Icon name="material-symbols:light-mode-rounded" data-icon="light-icon" />
  <Icon name="material-symbols:dark-mode-rounded" data-icon="dark-icon" />
</button>

<style>
  #themeToggle {
    border: none;
    background: none;
    cursor: pointer;
    padding: 0;
    color: var(--md-sys-color-on-surface);
    font-size: 1.5rem;
  }

  /* Light theme: show light, hide dark */
  :global(.light) [data-icon="dark-icon"] {
    display: flex;
  }
  :global(.light) [data-icon="light-icon"] {
    display: none;
  }

  /* Dark theme: hide light, show dark */
  :global(.dark) [data-icon="dark-icon"] {
    display: none;
  }
  :global(.dark) [data-icon="light-icon"] {
    display: flex;
  }
</style>

<script is:inline>
  document.addEventListener('astro:page-load', () => {
  const theme = (() => {
    const localStorageTheme = localStorage.getItem("theme");
    if (localStorageTheme === "dark" || localStorageTheme === "light") {
      return localStorageTheme;
    }
    if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
      return 'dark';
    }
    return 'light';
  })();

  function applyTheme(currentTheme) {
    const root = document.documentElement;
    if (currentTheme === "dark") {
      root.classList.add("dark");
      root.classList.remove("light");
    } else {
      root.classList.add("light");
      root.classList.remove("dark");
    }
    localStorage.setItem("theme", currentTheme);
  }

  applyTheme(theme);

  const handleToggleClick = () => {
    const element = document.documentElement;
    let isDark;
    if (element.classList.contains("dark")) {
      isDark = false;
    } else {
       isDark = true;
    }

    applyTheme(isDark ? "dark" : "light");
  };

  document.getElementById("themeToggle")?.addEventListener("click", handleToggleClick);});
</script>
```
---

`src/components/WelcomeCompetitionPrompt.astro`:
```
---
import "material/dialog/dialog";
import "material/button/filled-button";
import "material/button/text-button";
import { Icon } from "astro-icon/components";
interface Props {
  userName: string;
  isParticipant: boolean | undefined;
}
const { userName, isParticipant } = Astro.props;
const showPrompt = typeof window === 'undefined' ? true : (!isParticipant && !window.localStorage.getItem('competitionPromptDismissed'));
---
{!isParticipant && (
  <md-dialog id="competition-welcome-dialog" open>
    <div slot="headline">
    Selamat datang, {userName}
    </div>
    <div slot="content">
      Apakah anda ingin berpartisipasi dalam <br> <Icon name="trophy2a" /><strong> Faraid Competition 2025</strong>?
    </div>
    <div slot="actions">
      <md-filled-button id="prompt-join-competition">Ya</md-filled-button>
      <md-text-button id="prompt-dismiss-competition">Mungkin nanti</md-text-button>
    </div>
  </md-dialog>
)}
<script>
  import "material/dialog/dialog";
  import "material/button/filled-button";
  import "material/button/text-button";
  document.addEventListener("astro:page-load", () => {
    const dialog = document.getElementById("competition-welcome-dialog");
    const joinBtn = document.getElementById("prompt-join-competition");
    const dismissBtn = document.getElementById("prompt-dismiss-competition");
    if (joinBtn) {
      joinBtn.addEventListener("click", async () => {
        (joinBtn as HTMLButtonElement).disabled = true;
        try {
          const response = await fetch("/api/profile", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ is_participant: true })
          });
          if (!response.ok) {
            const errorData = await response.json();
            alert(errorData.error || "Failed to join competition");
            (joinBtn as HTMLButtonElement).disabled = false;
            return;
          }
          window.location.reload();
        } catch (err) {
          alert("An unexpected error occurred.");
          (joinBtn as HTMLButtonElement).disabled = false;
        }
      });
    }
    if (dismissBtn) {
      dismissBtn.addEventListener("click", () => {
        window.localStorage.setItem('competitionPromptDismissed', 'true');
        if (dialog && typeof (dialog as HTMLDialogElement).close === 'function') (dialog as HTMLDialogElement).close();
      });
    }
  });
</script>
<style>
#competition-welcome-dialog {
    z-index: 1000;
    margin: auto;
}
</style>

```
---

`src/data/links.js`:
```
// src/data/links.js
export const links = [
    { href: "/competition", text: "Competition" },
    { href: "/dashboard", text: "Dashboard" },
  ];
```
---

`src/layout/Base.astro`:
```
---
import Header from "../components/Header.astro";
import "../styles/global.css";
import "../styles/light.css";
import "../styles/dark.css";
import { ClientRouter } from 'astro:transitions';

interface Props {
  title: string;
}

const { title } = Astro.props;

const isLoggedIn = !!Astro.locals.userId;

import '@fontsource-variable/open-sans';
import '@fontsource/amiri';
import '@fontsource-variable/eb-garamond';
import Footer from "../components/Footer.astro";

---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <title>{title}</title>
    <ClientRouter />
    <meta name="viewport" content="width=device-width" />
  </head>
  <body>
    <Header isLoggedIn={isLoggedIn} />
    <slot />
    <Footer />
  </body>
</html>
```
---

`src/lib/apiHelpers.ts`:
```
// src/lib/apiHelpers.ts
import type { PostgrestError } from "@supabase/supabase-js";
import { AuthError } from "@supabase/supabase-js";

export function handleSupabaseError(error: PostgrestError, message: string) {
  console.error(message, error);
  return new Response(
    JSON.stringify({
      error: message,
      details: error.message,
    }),
    { status: 500, headers: { "Content-Type": "application/json" } },
  );
}

export function handleCountError(error: any, message: string) {
    console.error(message, error);
    return new Response(
        JSON.stringify({
            error: message,
            details: error.message || "Unknown error",
        }),
        { status: 500, headers: { 'Content-Type': 'application/json' } }
    );
}

export function handleRequestError(error: any, message: string) {
    console.error(message, error);
    return new Response(
        JSON.stringify({
          error: message,
          details: error.message || 'Invalid Request',
        }),
        { status: 400, headers: { 'Content-Type': 'application/json' } }
    );
  }

export function handleAuthError(error: AuthError, message: string) {
  console.error(message, error);
  return new Response(
    JSON.stringify({
      error: message,
      details: error.message,
    }),
    { status: 500, headers: { "Content-Type": "application/json" } },
  );
}
```
---

`src/lib/auth.ts`:
```
// src/lib/auth.ts
import type { AstroCookies } from "astro";
import { supabase } from "./supabase";

export function setAuthCookies(
  cookies: AstroCookies,
  access_token: string,
  refresh_token: string,
) {
  cookies.set("sb-access-token", access_token, {
    sameSite: "strict",
    path: "/",
    secure: true,
    httpOnly: true,
  });
  cookies.set("sb-refresh-token", refresh_token, {
    sameSite: "strict",
    path: "/",
    secure: true,
    httpOnly: true,
  });
}

export function clearAuthCookies(cookies: AstroCookies) {
  cookies.delete("sb-access-token", { path: "/" });
  cookies.delete("sb-refresh-token", { path: "/" });
}

export async function checkAndSetSession(cookies: AstroCookies, locals?: App.Locals) {
    const refreshToken = cookies.get("sb-refresh-token");

    if (!refreshToken) {
        return false;
    }

    const { data: { session }, error } = await supabase.auth.getSession();

    if (error || !session) {
        clearAuthCookies(cookies);
        return false;
    }

    if(session.access_token !== cookies.get("sb-access-token")?.value || session.refresh_token !== cookies.get("sb-refresh-token")?.value){
        setAuthCookies(cookies, session.access_token, session.refresh_token);
    }


    if (locals && session.user) {
        locals.email = session.user.email ?? "";
        locals.name = session.user.user_metadata?.name ?? "";
        locals.avatar_url = session.user.user_metadata?.avatar_url ?? "";
        locals.userId = session.user.id;
        locals.createdAt = session.user.created_at;
        locals.school = session.user.user_metadata?.school ?? "";
        locals.phone = session.user.user_metadata?.phone ?? "";
        locals.is_participant = session.user.user_metadata?.is_participant ?? false;
        locals.is_visible = session.user.user_metadata?.is_visible ?? false;
    }

    return true;
}
```
---

`src/lib/supabase.ts`:
```
// src/lib/supabase.ts
import { createClient } from "@supabase/supabase-js";

export const supabase = createClient(
  import.meta.env.SUPABASE_URL,
  import.meta.env.SUPABASE_ANON_KEY,
  {
    auth: {
      flowType: "pkce",
      autoRefreshToken: true,
      persistSession: true,
    },
  },
);
```
---

`src/middleware/index.ts`:
```
// src/middleware/index.ts
import { defineMiddleware } from "astro:middleware";
import micromatch from "micromatch";
import { checkAndSetSession, clearAuthCookies } from "../lib/auth";
import { supabase } from "../lib/supabase";

const protectedRoutes = [
    "/dashboard(|/)",
    "/competition",
    "/competition/**",
];
const redirectRoutes = ["/signin(|/)", "/register(|/)"];
const protectedAPIRoutes = ["/api/answers(|/)", "/api/profile(|/)"];

export const onRequest = defineMiddleware(
  async ({ locals, url, cookies, redirect }, next) => {
    // Always attempt to set session data for ALL requests if cookies are present.
    // This will populate Astro.locals if the user is logged in.
    const isUserLoggedIn = await checkAndSetSession(cookies, locals);

    if (micromatch.isMatch(url.pathname, protectedRoutes)) {
      if (!isUserLoggedIn) {
        // The route is protected and user is not logged in, redirect.
        return redirect("/signin");
      }
    }

    if (micromatch.isMatch(url.pathname, redirectRoutes)) {
      if (isUserLoggedIn) {
        // Route is a signin/register page and user is logged in, redirect.
        return redirect("/dashboard");
      }
    }

    if (micromatch.isMatch(url.pathname, protectedAPIRoutes)) {
      // For protected API routes, if Astro.locals.userId wasn't populated by checkAndSetSession,
      // it means the user is not authenticated.
      if (!locals.userId) {
        return new Response(
          JSON.stringify({
            error: "Unauthorized",
          }),
          { status: 401, headers: { "Content-Type": "application/json" } },
        );
      }
      // locals.userId is already available if isUserLoggedIn was true.
    }

    return next();
  },
);
```
---

`src/pages/dashboard.astro`:
```
---
// src/pages/dashboard.astro
import Form from "../components/Form.astro"
import Base from "../layout/Base.astro";
import Profile from "../components/Profile.astro";
import WelcomeCompetitionPrompt from "../components/WelcomeCompetitionPrompt.astro";
const { name, school, phone, is_participant, is_visible } = Astro.locals;
---

<Base title="Dashboard">
  <WelcomeCompetitionPrompt userName={name} isParticipant={is_participant} />
  <Profile />
  <md-text-button class="logout" href="/api/auth/signout">KELUAR</md-text-button>
  <Form userName={name} userSchool={school} userPhone={phone} userIsVisible={is_visible}></Form>
</Base>

<script>
import "material/dialog/dialog";
import "material/button/text-button";
</script>

<style>
md-text-button{
    font-family: 'Open Sans Variable', sans-serif;
    --md-text-button-label-text-color: var(--md-sys-color-error);
}
</style>
```
---

`src/pages/index.astro`:
```
---
// src/pages/index.astro

import Base from "../layout/Base.astro";
import Ayat from "../images/ayat.svg";
import { Icon } from "astro-icon/components";
import CompetitionAnnouncement from "../components/CompetitionAnnouncement.astro";

const isLoggedIn = !!Astro.locals.userId;
const isParticipant = !!Astro.locals.is_participant;
---

<Base title="Faraid Academy - Home">
  <main class="col">
    <div class="main-text col">
      <div class="main-verse col">
        <div class="verse row">
          <Icon class="flip" name="parenthesis" size="1.5em" />
          <Ayat height="3em" ; fill="currentColor" />
          <Icon name="parenthesis" size="1.5em" />
        </div>
        <div class="translation col">
          <p>
            These (inheritance rules) are settled portions <span
              >ordained by Allah</span
            >
            <Icon name="tabarak" />
          </p>
        </div>
      </div>
      <div class="main-hadith col">
        <div class="hadith" dir="rtl">
          <p>«ألحقوا الفرائض بأهلها»</p>
        </div>
        <p class="translation">
          Assign the prescribed shares [of inheritance] to the ones whom they
          rightfully belong
        </p>
      </div>
    </div>
    <CompetitionAnnouncement isLoggedIn={isLoggedIn} isParticipant={isParticipant} />
  </main>
</Base>
<style>
  main {
    gap: 1.5em;
  }
  p {
    text-align: center;
  }

  span {
    display: inline-block;
  }
  .main-text {
    gap: 2em;
    font-family: "EB Garamond Variable", serif;
  }
  .main-verse {
    gap: 0.5em;
    font-size: 1.1em;
  }

  .verse {
    gap: 1em;
    justify-content: center;
  }

  .translation {
    text-wrap: pretty;
    font-size: 0.9em;
  }

  .flip {
    transform: scaleX(-1);
  }

  .main-hadith {
    display: none;
    font-size: 0.6em;
  }

  .hadith {
    font-family: "Amiri", serif;
    font-size: 1.3em;
  }

  [data-icon="tabarak"] {
    vertical-align: middle;
  }

  @media (min-width: 900px) {
    body {
      font-size: 1.5em;
    }

    .main-hadith {
      display: flex;
    }
  }
</style>

```
---

`src/pages/signin.astro`:
```
---
// src/pages/signin.astro
import Base from "../layout/Base.astro";
import AuthForm from "../components/AuthForm.astro";
const title = "Log in";

---

<Base title={title}>
  <main>
    <section>
      <AuthForm showProviderButtons />
    </section>
  </main>
</Base>
```
---

`src/pages/api/answers.ts`:
```
// src/pages/api/answers.ts
import type { APIRoute } from "astro";
import { supabase } from "../../lib/supabase";
import { handleSupabaseError, handleRequestError } from "../../lib/apiHelpers";

export const POST: APIRoute = async ({ request, locals, redirect }) => {
  console.log("API Route /api/answers: locals:", locals); // Keep this log

  try {
    const { questionId, answerId } = await request.json();

    // Validate input (important for security and data integrity)
    if (!questionId || (answerId === undefined)) {
      return new Response(
        JSON.stringify({ error: "questionId and answerId are required" }),
        { status: 400, headers: { 'Content-Type': 'application/json' } },
      );
    }

    // Use upsert to insert or update the result
    const { error } = await supabase
      .from("results")
      .upsert(
        {
          user_id: locals.userId,
          question_id: questionId,
          answer_id: answerId,
        },
        { onConflict: 'user_id,question_id' }
      )
      .select();

    if (error) {
      return handleSupabaseError(error, "Failed to save answer"); // Use the helper
    }

    return new Response(JSON.stringify({ success: true }), { status: 200, headers: { 'Content-Type': 'application/json' } });
  } catch (error) {
    return handleRequestError(error, "Invalid request body"); // Use new helper
  }
};
```
---

`src/pages/api/profile.ts`:
```
// src/pages/api/profile.ts
import type { APIRoute } from "astro";
import { supabase } from "../../lib/supabase";
import { handleRequestError, handleAuthError } from "../../lib/apiHelpers";

export const POST: APIRoute = async ({ request, locals }) => {
  try {
    const requestData = await request.json();
    const updateData: { [key: string]: any } = {};
    if ('name' in requestData) updateData.name = requestData.name;
    if ('school' in requestData) updateData.school = requestData.school;
    if ('phone' in requestData) updateData.phone = requestData.phone;
    if ('is_participant' in requestData) updateData.is_participant = requestData.is_participant;
    if ('is_visible' in requestData) updateData.is_visible = requestData.is_visible;

    if (Object.keys(updateData).length === 0) {
      return new Response(JSON.stringify({ message: "No data provided to update" }), {
        status: 400,
        headers: { "Content-Type": "application/json" },
      });
    }

    const { error } = await supabase.auth.updateUser({
      data: updateData,
    });

    if (error) {
      return handleAuthError(error, "Failed to update profile");
    }

    return new Response(JSON.stringify({ success: true }), {
      status: 200,
      headers: { "Content-Type": "application/json" },
    });
  } catch (error) {
    return handleRequestError(error, "Invalid request body");
  }
};
```
---

`src/pages/api/auth/callback.ts`:
```
// src/pages/api/auth/callback.ts
import type { APIRoute } from "astro";
import { supabase } from "../../../lib/supabase";

export const GET: APIRoute = async ({ url, cookies, redirect }) => {
  const authCode = url.searchParams.get("code");

  if (!authCode) {
    return new Response("No code provided", { status: 400 });
  }

  const { data, error } = await supabase.auth.exchangeCodeForSession(authCode);

  if (error) {
    return new Response(error.message, { status: 500 });
  }

  const { access_token, refresh_token } = data.session;

  cookies.set("sb-access-token", access_token, {
    path: "/",
    secure: true,
    httpOnly: true,
  });
  cookies.set("sb-refresh-token", refresh_token, {
    path: "/",
    secure: true,
    httpOnly: true,
  });

  // Create a new URL object for the /dashboard page
  const redirectUrl = new URL('/dashboard', url.origin);

  // Redirect to the cleaned URL
  return redirect(redirectUrl.toString());
};
```
---

`src/pages/api/auth/signin.ts`:
```
// src/pages/api/auth/signin.ts
import type { APIRoute } from "astro";
import { supabase } from "../../../lib/supabase";
import type { Provider } from "@supabase/supabase-js";

export const POST: APIRoute = async ({ request, redirect }) => {
  const formData = await request.formData();
  const provider = formData.get("provider")?.toString();

  if (provider) {
    const { data, error } = await supabase.auth.signInWithOAuth({
      provider: provider as Provider,
      options: {
        redirectTo: import.meta.env.DEV
          ? "http://localhost:4321/api/auth/callback"
          : "https://faraidacademy.netlify.app/api/auth/callback",
      },
    });

    if (error) {
      return new Response(error.message, { status: 500 });
    }

    return redirect(data.url);
  }

  return new Response("Provider required", { status: 400 });
};
```
---

`src/pages/api/auth/signout.ts`:
```
// src/pages/api/auth/signout.ts
import type { APIRoute } from "astro";
import { clearAuthCookies } from "../../../lib/auth"; // Import

export const GET: APIRoute = async ({ cookies, redirect }) => {
  clearAuthCookies(cookies); // Use helper
  return redirect("/signin");
};
```
---

`src/pages/competition/index.astro`:
```
---
// src/pages/competition/index.astro
import Base from "../../layout/Base.astro";

---

<Base title="Competition">
  <section>
    <h1>Competition</h1>
    <p>Select a question to start:</p>
    <ul>
        <li><a href="/competition/1">Start Competition</a></li>
    </ul>
  </section>
</Base>
```
---

`src/pages/competition/[id].astro`:
```
---
import Countdown from "../../components/Countdown.astro";
import Base from "../../layout/Base.astro";
import { supabase } from "../../lib/supabase";
import type { Question, Answer } from "../../types";
import { Icon } from "astro-icon/components";

const { id } = Astro.params;

if (!id || isNaN(Number(id))) {
  return Astro.redirect("/404");
}

const questionId = Number(id);

const { data: questionData, error: questionError } = await supabase
  .from("questions")
  .select("id, question, money, case")
  .eq("id", questionId)
  .single();

if (questionError) {
  return Astro.redirect("/404");
}

if (!questionData) {
  return Astro.redirect("/404");
}

const { data: answersData, error: answersError } = await supabase
  .from("answers")
  .select("id, question_id, answer")
  .eq("question_id", questionId);

if (answersError) {
  return Astro.redirect("/404");
}

function shuffleArray(array: any[]) {
  for (let i = array.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [array[i], array[j]] = [array[j], array[i]];
  }
}

const question: Question = questionData;
const answers: Answer[] = answersData || [];
shuffleArray(answers);

const { count: totalQuestionCount, error: countError } = await supabase
  .from("questions")
  .select('*', { count: 'exact', head: true });

if (countError || totalQuestionCount === null) {
  console.error("Error fetching question count:", countError);
  return Astro.redirect("/competition");
}

let userResult = undefined;
let userHasAnswered = false;

if (Astro.locals.userId) {
  const { data: resultExistsData, error: resultExistsError } = await supabase
    .from("results")
    .select("id")
    .eq("user_id", Astro.locals.userId)
    .eq("question_id", questionId)
    .single();

  if (resultExistsError && resultExistsError.code !== "PGRST116") {
    console.error("Error checking if user has answered:", resultExistsError);
  } else {
    userHasAnswered = !!resultExistsData;
  }

  if (userHasAnswered) {
    const { data: resultData, error: resultError } = await supabase
      .from("results")
      .select("answer_id")
      .eq("user_id", Astro.locals.userId)
      .eq("question_id", questionId)
      .single();

    if (resultError && resultError.code !== "PGRST116") {
      console.error("Error fetching user result:", resultError);
    } else if (resultData) {
      userResult = resultData.answer_id;
    }
  }
}

function formatNumber(num: number | null | undefined): string {
  if (num === null || num === undefined) {
    return "";
  }
  return num.toLocaleString("de-DE");
}

const formattedMoney = formatNumber(question.money);
---

<Base title={`Question ${questionId}`}>
  <md-filled-card class="countdown">
    <Countdown targetTime="March 19, 2025 13:15:00 GMT+0300" format="colon" />
  </md-filled-card>
  <style>
    .countdown {
      padding: 12px;
    }
  </style>
  <md-elevated-card dir="rtl" class="competition-card col">
    <div class="question-area col" data-question-id={questionId}>
      <md-filled-card class="question col">
        <p>{question.question}</p>
        {formattedMoney && <p>التركة: Rp {formattedMoney}</p>}
        <p>السؤال: كم نصيب {question.case}؟</p>
      </md-filled-card>

      <div class="answers col">
        <div
          class="answers-list col"
          role="radiogroup"
          aria-label="Select an Answer"
        >
          {
            answers.map((answer) => (
              <div class="radio-group">
                <md-radio
                  id={`answer-${answer.id}`}
                  name="question-answers"
                  value={String(answer.id)}
                  checked={userResult === answer.id}
                  aria-label={answer.answer}
                />
                <label for={`answer-${answer.id}`}>
                  Rp {formatNumber(Number(answer.answer))}
                </label>
              </div>
            ))
          }
          <div class="radio-group null">
            <md-radio
              id="answer-null"
              name="question-answers"
              value="null"
              checked={userResult === null}
              aria-label="None of the Above"
            >
            </md-radio>
            <label for="answer-null">لا شيء مما سبق</label>
          </div>
        </div>
      </div>
    </div>
    <div class="navigation">
      {
        questionId > 1 && (
          <md-filled-tonal-icon-button href={`/competition/${questionId - 1}`}>
            <Icon name="material-symbols:arrow-forward-rounded" size="2em" />
          </md-filled-tonal-icon-button>
        )
      }

      <p>
        <span id="status-indicator">
          {
            userHasAnswered ? (
              <>
                <Icon name="material-symbols:check-circle-rounded" />
                 Tersimpan
              </>
            ) : (
              <>
                <Icon name="material-symbols:warning-rounded" />
                 Belum Tersimpan
              </>
            )
          }
        </span>
      </p>
      {
        questionId < totalQuestionCount && (
          <md-filled-tonal-icon-button href={`/competition/${questionId + 1}`}>
            <Icon name="material-symbols:arrow-back-rounded" size="2em" />
          </md-filled-tonal-icon-button>
        )
      }
    </div>
  </md-elevated-card>
</Base>

<script>
  import "material/radio/radio";
  import "material/iconbutton/filled-tonal-icon-button";
  import "material/card/elevated-card";
  import "material/card/filled-card";

  document.addEventListener("astro:page-load", () => {
    const statusIndicator = document.getElementById("status-indicator")!;

    const questionAreaElement = document.querySelector<HTMLElement>("div.question-area");
    const questionId = questionAreaElement
      ? parseInt(questionAreaElement.dataset.questionId || "", 10)
      : null;



    async function submitAnswer(
      questionId: number | null,
      answerId: number | null | string,
    ) {
      if (questionId === null) {
        console.error("Question ID not found!");
        statusIndicator.textContent = "error";
        return;
      }

      const parsedAnswerId =
        answerId === "null"
          ? null
          : typeof answerId === "string"
            ? parseInt(answerId, 10)
            : answerId;

      if (parsedAnswerId === null && answerId !== "null") {
        console.error("Invalid answer ID:", answerId);
        statusIndicator.textContent = "error";
        return;
      }

      try {
        const response = await fetch("/api/answers", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            questionId: questionId,
            answerId: parsedAnswerId,
          }),
        });

        if (!response.ok) {
          const errorData = await response.json();
          const errorMessage = errorData.error || "Failed to save answer";
          throw new Error(errorMessage);
        }

        statusIndicator.textContent = "✅ Tersimpan";
        return true;
      } catch (error) {
        console.error("Error saving answer:", error);
        statusIndicator.textContent = "error";

        if (error instanceof Error) {
          alert(error.message);
        } else {
          alert("An unexpected error occurred.");
        }
        return false;
      }
    }

    const radioGroup = document.querySelector('[role="radiogroup"]');

    radioGroup?.addEventListener("change", async (event) => {
      const target = event.target as HTMLInputElement;

      if (target.tagName === "MD-RADIO") {
        statusIndicator.textContent = "⚠ Belum Tersimpan"; 
        await submitAnswer(questionId, target.value);
      }
    });
  });
</script>

<style is:global>
  body {
    background-image: none;
    background-color: var(--md-sys-color-surface);
  }
  body::before {
    display: none;
  }
</style>

<style lang="css">
  .competition-card {
    width: 90%;
    background-color: none;
    font-family: "Amiri", serif;
    padding: 1em;
  }

  section {
    width: 100%;
  }

  .question {
    gap: 1em;
    width: 100%;
    align-items: flex-start;
    padding: 1em;
  }

  .answers {
    width: 100%;
    align-items: flex-start;
    padding: 1em;
  }

  .navigation {
    display: flex;
    justify-content: space-between;
    width: 100%;
    align-items: center;
  }
  .answers-list {
    align-items: flex-start;
    gap: 0.8em;
  }

  .radio-group {
    display: flex;
    align-items: center;
    gap: 1em;
    font-family: "EB Garamond Variable", serif;
  }

  md-radio {
    display: inline-flex;
  }

  .null {
    font-family: "Amiri", serif;
  }

  #status-indicator {
    display: flex;
    align-items: center;
    color: var(--md-sys-color-on-surface);
    font-family: "Open Sans", sans-serif;
    font-size: 0.7em;
  }

  [data-icon="material-symbols:check-circle-rounded"] {
    color: var(--md-sys-color-primary);
  }

  [data-icon="material-symbols:warning-rounded"] {
    color: var(--md-sys-color-error);
  }

  @media (min-width: 600px) and (max-width: 839px) {
    .competition-card {
      font-size: 1.2em;
    }
  }

  @media (min-width: 840px) {
    .competition-card {
      font-size: 0.8em;
      width: auto;
      gap: 1em;
    }

    .question, .answers{
      width: auto;
    }

    .question-area {
      flex-direction: row;
      gap: 1em;
    }
  }
</style>
```
---
