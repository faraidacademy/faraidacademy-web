---

`src\pages\competition\index.astro`:
```
---
// src/pages/competition/index.astro
import Base from "../../layout/Base.astro";

---

<Base title="Competition">
  <section>
    <h1>Competition</h1>
    <p>Select a question to start:</p>
    <ul>
        <li><a href="/competition/1">Start Competition</a></li>
    </ul>
  </section>
</Base>
```

---

`src\pages\api\auth\signout.ts`:
```
// src/pages/api/auth/signout.ts
import type { APIRoute } from "astro";
import { clearAuthCookies } from "../../../lib/auth"; // Import

export const GET: APIRoute = async ({ cookies, redirect }) => {
  clearAuthCookies(cookies); // Use helper
  return redirect("/signin");
};
```

---

`astro.config.mjs`:
```
import { defineConfig } from 'astro/config';
import netlify from '@astrojs/netlify';

import sitemap from '@astrojs/sitemap';

import icon from 'astro-icon';

export default defineConfig({
  image: {
    domains: ["googleusercontent.com"],
  },
  experimental: {
    svg: true,
  },
  output: 'server',

  adapter: netlify({
    edgeMiddleware: false,
  }),

  integrations: [sitemap(), icon({
    include: {
      "material-symbols": ["*"],
    },
  }),],
});
```

---

`src\lib\auth.ts`:
```
// src/lib/auth.ts
import type { AstroCookies } from "astro";
import { supabase } from "./supabase";

export function setAuthCookies(
  cookies: AstroCookies,
  access_token: string,
  refresh_token: string,
) {
  cookies.set("sb-access-token", access_token, {
    sameSite: "strict",
    path: "/",
    secure: true,
    httpOnly: true,
  });
  cookies.set("sb-refresh-token", refresh_token, {
    sameSite: "strict",
    path: "/",
    secure: true,
    httpOnly: true,
  });
}

export function clearAuthCookies(cookies: AstroCookies) {
  cookies.delete("sb-access-token", { path: "/" });
  cookies.delete("sb-refresh-token", { path: "/" });
}

export async function checkAndSetSession(cookies: AstroCookies, locals?: App.Locals) {
    const refreshToken = cookies.get("sb-refresh-token");

    if (!refreshToken) {
        return false;
    }

    const { data: { session }, error } = await supabase.auth.getSession();

    if (error || !session) {
        clearAuthCookies(cookies);
        return false;
    }

    if(session.access_token !== cookies.get("sb-access-token")?.value || session.refresh_token !== cookies.get("sb-refresh-token")?.value){
        setAuthCookies(cookies, session.access_token, session.refresh_token);
    }


    if (locals && session.user) {
        locals.email = session.user.email ?? "";
        locals.name = session.user.user_metadata?.name ?? "";
        locals.avatar_url = session.user.user_metadata?.avatar_url ?? "";
        locals.userId = session.user.id;
        locals.createdAt = session.user.created_at;
        locals.school = session.user.user_metadata?.school ?? ""; // NEW
        locals.phone = session.user.user_metadata?.phone ?? "";
    }

    return true;
}
```

---

`src\pages\api\profile.ts`:
```
// src/pages/api/profile.ts
import type { APIRoute } from "astro";
import { supabase } from "../../lib/supabase";
import { handleRequestError, handleAuthError } from "../../lib/apiHelpers";

export const POST: APIRoute = async ({ request, locals }) => {
  if (!locals.userId) {
    return new Response(JSON.stringify({ error: "Unauthorized" }), {
      status: 401,
      headers: { "Content-Type": "application/json" },
    });
  }

  try {
    const { name, school, phone } = await request.json();

    if (typeof name !== 'string' || name.length < 4) {
      return handleRequestError(new Error("Invalid name"), "Name must be at least 4 characters");
    }
    if (typeof school !== 'string' || school.length < 4) {
      return handleRequestError(new Error("Invalid school"), "School must be at least 4 characters");
    }
    if (typeof phone !== 'string' || phone.length < 4) {
      return handleRequestError(new Error("Invalid phone"), "Phone must be at least 4 characters");
    }
    // Update user metadata
    const { error } = await supabase.auth.updateUser({
      data: {
        name: name,
        school: school,
        phone: phone,
      },
    });

    if (error) {
      return handleAuthError(error, "Failed to update profile");
    }

    return new Response(JSON.stringify({ success: true }), {
      status: 200,
      headers: { "Content-Type": "application/json" },
    });
  } catch (error) {
     return handleRequestError(error, "Invalid request body");
  }
};
```

---

`src\pages\api\auth\signin.ts`:
```
// src/pages/api/auth/signin.ts
import type { APIRoute } from "astro";
import { supabase } from "../../../lib/supabase";
import type { Provider } from "@supabase/supabase-js";

export const POST: APIRoute = async ({ request, redirect }) => {
  const formData = await request.formData();
  const provider = formData.get("provider")?.toString();

  if (provider) {
    const { data, error } = await supabase.auth.signInWithOAuth({
      provider: provider as Provider,
      options: {
        redirectTo: import.meta.env.DEV
          ? "http://localhost:4321/api/auth/callback"
          : "https://faraidacademy.netlify.app/api/auth/callback",
      },
    });

    if (error) {
      return new Response(error.message, { status: 500 });
    }

    return redirect(data.url);
  }

  return new Response("Provider required", { status: 400 });
};
```

---

`src\middleware\index.ts`:
```
// src/middleware/index.ts
import { defineMiddleware } from "astro:middleware";
import micromatch from "micromatch";
import { checkAndSetSession, clearAuthCookies } from "../lib/auth";
import { supabase } from "../lib/supabase";

const protectedRoutes = [
    "/dashboard(|/)",
    "/competition",
    "/competition/**",
];
const redirectRoutes = ["/signin(|/)", "/register(|/)"];
const protectedAPIRoutes = ["/api/questions(|/)", "/api/answers(|/)", "/api/profile(|/)"];

export const onRequest = defineMiddleware(
  async ({ locals, url, cookies, redirect }, next) => {
    if (micromatch.isMatch(url.pathname, protectedRoutes)) {
      const isLoggedIn = await checkAndSetSession(cookies, locals);
      if (!isLoggedIn) {
        return redirect("/signin");
      }
    }

    if (micromatch.isMatch(url.pathname, redirectRoutes)) {
      const isLoggedIn = await checkAndSetSession(cookies);
      if (isLoggedIn) {
        return redirect("/dashboard");
      }
    }

    if (micromatch.isMatch(url.pathname, protectedAPIRoutes)) {
      const refreshToken = cookies.get("sb-refresh-token");
        console.log("Middleware: Checking API route:", url.pathname, refreshToken);

      if (!refreshToken) {
          return new Response(
            JSON.stringify({
              error: "Unauthorized",
            }),
            { status: 401, headers: { "Content-Type": "application/json" } },
          );
      }

      const { data: { session }, error } = await supabase.auth.getSession();
        console.log("Middleware: session:", session, "error:", error);

        if (error || !session) {
            clearAuthCookies(cookies);
            return new Response(
                JSON.stringify({
                    error: "Unauthorized",
                }),
                { status: 401, headers: { "Content-Type": "application/json" } },
            );
        }

      locals.userId = session.user.id;

    }

    return next();
  },
);
```

---

`src\components\Profile.astro`:
```
---
import { Icon } from "astro-icon/components";
import { Image } from "astro:assets";
const { email, name, avatar_url, createdAt, school, phone } = Astro.locals;

function formatDate(dateString: string | undefined) {
  if (!dateString) {
    return "Unknown";
  }
  const date = new Date(dateString);
  return date.toLocaleDateString("id-ID", {
    weekday: "long",
    year: "numeric",
    month: "long",
    day: "numeric",
  });
}
---

<md-elevated-card class="card col">
  {
    avatar_url && (
      <Image
        class="avatar"
        src={avatar_url}
        alt={name ? `${name}'s avatar` : "User Avatar"}
        width={64}
        height={64}
      />
    )
  }

  <div class="name-badge col">
    <p class="name">{name || email}</p>
    <div class="badge row data">
      <Icon name="material-symbols:verified-rounded" size="1.2em" /> Peserta Kompetisi
      Faraid 2025
    </div>
  </div>

  <div class="details col">
    {
      school && (
        <p class="data school row">
          <Icon name="material-symbols:school-rounded" /> {school}
        </p>
      )
    }
    {
      phone && (
        <p class="data row">
          <Icon name="material-symbols:phone-forwarded-rounded" /> {phone}
        </p>
      )
    }
    <p class="data row">
      <Icon name="material-symbols:person-rounded" />
      {formatDate(createdAt)}
    </p>
  </div>

  <md-text-button id="edit-profile-button">EDIT PROFIL</md-text-button>
</md-elevated-card>

<script>
  import "material/button/text-button";
  import "material/card/elevated-card";

  const editProfileButton = document.getElementById("edit-profile-button");
  const dialog = document.querySelector("#edit-profile") as any;

  if (editProfileButton && dialog) {
    editProfileButton.addEventListener("click", () => {
      dialog.open = true;
    });
  }
</script>

<style>
  .card {
    padding: 1.5em;
    gap: 1em;
  }

  .badge {
    font-size: 0.6em;
    padding: 5px 12px;
    color: var(--md-sys-color-on-primary-container);
    background-color: var(--md-sys-color-primary-container);
    border-radius: 999px;
  }

  .name {
    font-size: 1.5em;
    font-weight: 600;
  }

  .school{
    font-size: 1.1em;
    font-weight: 600;
  }

  .details{
    font-size: 0.7em;
  }
  .data {
    gap: 0.5em;
  }

  .avatar {
    border-radius: 50%;
    border: 2px solid var(--md-sys-color-outline-variant);
  }
  md-text-button {
    font-family: "Open Sans Variable", sans-serif;
  }
</style>

```

---

`src\pages\api\auth\callback.ts`:
```
// src/pages/api/auth/callback.ts
import type { APIRoute } from "astro";
import { supabase } from "../../../lib/supabase";

export const GET: APIRoute = async ({ url, cookies, redirect }) => {
  const authCode = url.searchParams.get("code");

  if (!authCode) {
    return new Response("No code provided", { status: 400 });
  }

  const { data, error } = await supabase.auth.exchangeCodeForSession(authCode);

  if (error) {
    return new Response(error.message, { status: 500 });
  }

  const { access_token, refresh_token } = data.session;

  cookies.set("sb-access-token", access_token, {
    path: "/",
    secure: true,
    httpOnly: true,
  });
  cookies.set("sb-refresh-token", refresh_token, {
    path: "/",
    secure: true,
    httpOnly: true,
  });

  // Create a new URL object for the /dashboard page
  const redirectUrl = new URL('/dashboard', url.origin);

  // Redirect to the cleaned URL
  return redirect(redirectUrl.toString());
};
```

---

`src\pages\signin.astro`:
```
---
// src/pages/signin.astro
import Base from "../layout/Base.astro";
import AuthForm from "../components/AuthForm.astro";
const title = "Sign in";

---

<Base title={title}>
  <main>
    <section>
      <h1>{title}</h1>
      <AuthForm showProviderButtons />
    </section>
  </main>
</Base>
```

---

`src\lib\apiHelpers.ts`:
```
// src/lib/apiHelpers.ts
import type { PostgrestError } from "@supabase/supabase-js";
import { AuthError } from "@supabase/supabase-js";

export function handleSupabaseError(error: PostgrestError, message: string) {
  console.error(message, error);
  return new Response(
    JSON.stringify({
      error: message,
      details: error.message,
    }),
    { status: 500, headers: { "Content-Type": "application/json" } },
  );
}

export function handleCountError(error: any, message: string) {
    console.error(message, error);
    return new Response(
        JSON.stringify({
            error: message,
            details: error.message || "Unknown error",
        }),
        { status: 500, headers: { 'Content-Type': 'application/json' } }
    );
}

export function handleRequestError(error: any, message: string) {
    console.error(message, error);
    return new Response(
        JSON.stringify({
          error: message,
          details: error.message || 'Invalid Request',
        }),
        { status: 400, headers: { 'Content-Type': 'application/json' } }
    );
  }

export function handleAuthError(error: AuthError, message: string) {
  console.error(message, error);
  return new Response(
    JSON.stringify({
      error: message,
      details: error.message,
    }),
    { status: 500, headers: { "Content-Type": "application/json" } },
  );
}
```

---

`src\lib\supabase.ts`:
```
// src/lib/supabase.ts
import { createClient } from "@supabase/supabase-js";

export const supabase = createClient(
  import.meta.env.SUPABASE_URL,
  import.meta.env.SUPABASE_ANON_KEY,
  {
    auth: {
      flowType: "pkce",
      autoRefreshToken: true,
      persistSession: true,
    },
  },
);
```

---

`src\pages\dashboard.astro`:
```
---
// src/pages/dashboard.astro
import Form from "../components/Form.astro"
import Base from "../layout/Base.astro";
import Profile from "../components/Profile.astro";
const { name, school, phone } = Astro.locals;
---

<Base title="Dashboard">
<Profile />
  <md-text-button class="logout">KELUAR</md-text-button>
<Form userName={name} userSchool={school} userPhone={phone}></Form>
</Base>

<script>
import "material/dialog/dialog";
import "material/button/text-button";
</script>

<style>
md-text-button{
    font-family: 'Open Sans Variable', sans-serif;
    --md-text-button-label-text-color: var(--md-sys-color-error);
}
</style>
```

---

`src\components\Header.astro`:
```
---
import "@fontsource-variable/eb-garamond";
import { Icon } from "astro-icon/components";
import { Image } from "astro:assets";
import ThemeIcon from "./ThemeIcon.astro"; // Import the new component

interface Props {
    isLoggedIn: boolean;
}

const { isLoggedIn } = Astro.props;
const { avatar_url, name } = Astro.locals;
---

<header>
    <a href="/">
        <div class="main">
            <Icon name="Logo" size="1.5em" />
            <h1>FaraidAcademy</h1>
        </div>
        </a>
    <div class="nav row">
        <ThemeIcon />
        {
            isLoggedIn ? (
                avatar_url ? (
                    <a href="/dashboard">
                        <Image
                            class="avatar"
                            src={avatar_url}
                            alt={name ? `${name}'s avatar` : "User Avatar"}
                            width={32}
                            height={32}
                            loading="lazy"
                            format="webp"
                        />
                    </a>
                ) : (
                    <a href="/dashboard">Dashboard</a>
                )
            ) : (
                <form action="/api/auth/signin" method="post">
                    <md-text-button
                        class="button"
                        name="provider"
                        value="google"
                        type="submit"
                    >
                        LOGIN
                    </md-text-button>
                </form>
            )
        }
    </div>
</header>

<script>
    import "material/button/text-button";
</script>

<style>
    header {
        font-family: "EB Garamond Variable", serif;
        display: flex;
        flex-direction: row;
        align-items: center;
        gap: 0.3em;
        position: fixed;
        top: 0;
        padding: 1em;
        justify-content: space-between;
        width: 100%;
        background-color: transparent;
        z-index: 100;
    }

    [data-icon="Logo"] {
    }

    .main {
        display: flex;
        flex-direction: row;
        align-items: center;
        gap: 0.5em;
        font-size: 1em;
    }

    h1 {
        font-weight: 500;
        font-size: 1em;
    }

    header a {
        display: flex;
        text-decoration: none;
        color: inherit;
        height: min-content;
    }
    .nav {
        width: min-content;
        height: min-content;
        gap: 1em;
    }
    .avatar {
        border-radius: 50%;
        object-fit: cover;
        border: 2px solid var(--md-sys-color-outline-variant);
    }

    .button {
        font-family: "Open Sans", sans-serif;
    }
</style>

```

---