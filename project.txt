---

`src\layout\Base.astro`:
```
---
import Header from "../components/Header.astro";
import "../styles/global.css";
import { checkAndSetSession } from '../lib/auth'; // Import here
import "../styles/light.css";  // Import light theme
import "../styles/dark.css";   // Import dark theme
import { ClientRouter } from 'astro:transitions';

interface Props {
  title: string;
}

const { title } = Astro.props;

// Perform the login check HERE, in the layout
const isLoggedIn = await checkAndSetSession(Astro.cookies, Astro.locals);

import '@fontsource-variable/open-sans';
import Footer from "../components/Footer.astro";

---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <title>{title}</title>
    <ClientRouter />
    <meta name="viewport" content="width=device-width" />
  </head>
  <body>
    <Header isLoggedIn={isLoggedIn} />
    <slot />
    <Footer />
  </body>
</html>
```

---

`src\lib\auth.ts`:
```
// src/lib/auth.ts
import type { AstroCookies } from "astro";
import { supabase } from "./supabase";

export function setAuthCookies(
  cookies: AstroCookies,
  access_token: string,
  refresh_token: string,
) {
  cookies.set("sb-access-token", access_token, {
    sameSite: "strict",
    path: "/",
    secure: true,
    httpOnly: true,
  });
  cookies.set("sb-refresh-token", refresh_token, {
    sameSite: "strict",
    path: "/",
    secure: true,
    httpOnly: true,
  });
}

export function clearAuthCookies(cookies: AstroCookies) {
  cookies.delete("sb-access-token", { path: "/" });
  cookies.delete("sb-refresh-token", { path: "/" });
}

export async function checkAndSetSession(cookies: AstroCookies, locals?: App.Locals) {
    const refreshToken = cookies.get("sb-refresh-token");

    if (!refreshToken) {
        return false;
    }

    const { data: { session }, error } = await supabase.auth.getSession();

    if (error || !session) {
        clearAuthCookies(cookies);
        return false;
    }

    if(session.access_token !== cookies.get("sb-access-token")?.value || session.refresh_token !== cookies.get("sb-refresh-token")?.value){
        setAuthCookies(cookies, session.access_token, session.refresh_token);
    }


    if (locals && session.user) {
        locals.email = session.user.email ?? "";
        locals.name = session.user.user_metadata?.name ?? "";
        locals.avatar_url = session.user.user_metadata?.avatar_url ?? "";
        locals.userId = session.user.id;
        locals.createdAt = session.user.created_at;
        locals.school = session.user.user_metadata?.school ?? "";
        locals.phone = session.user.user_metadata?.phone ?? "";
        locals.is_participant = session.user.user_metadata?.is_participant ?? false;
        locals.is_visible = session.user.user_metadata?.is_visible ?? false;
    }

    return true;
}
```

---

`src\components\Profile.astro`:
```
---
import { Icon } from "astro-icon/components";
import { Image } from "astro:assets";
const { email, name, avatar_url, createdAt, school, phone, is_participant, is_visible } = Astro.locals;

function formatDate(dateString: string | undefined) {
  if (!dateString) {
    return "Unknown";
  }
  const date = new Date(dateString);
  return date.toLocaleDateString("id-ID", {
    weekday: "long",
    year: "numeric",
    month: "long",
    day: "numeric",
  });
}
---

<md-elevated-card class="card col">
  <div class="main col">
  {
    avatar_url && (
      <Image
        class="avatar"
        src={avatar_url}
        alt={name ? `${name}'s avatar` : "User Avatar"}
        width={64}
        height={64}
      />
    )
  }

  <div class="name-badge col">
    <p class="name">{name || email}</p>
    {is_participant && (
      <div class="badge row data">
        <Icon name="material-symbols:verified-rounded" size="1.2em" /> Peserta Kompetisi
        Faraid 2025
      </div>
    )}
  </div>
</div>

  <div class="details col">
    {
      school && (
        <p class="data school row">
          <Icon name="material-symbols:school-rounded" /> {school}
        </p>
      )
    }
    {
      phone && (
        <p class="data row">
          <Icon name="material-symbols:phone-forwarded-rounded" /> {phone}
        </p>
      )
    }
    <p class="data row">
      <Icon name="material-symbols:person-rounded" />
      {formatDate(createdAt)}
    </p>
  </div>

  <md-text-button id="edit-profile-button"><Icon slot="icon" name="material-symbols:edit-square-rounded" /> EDIT PROFIL</md-text-button>
</md-elevated-card>

<script>
  import "material/button/text-button";
  import "material/card/elevated-card";

  const editProfileButton = document.getElementById("edit-profile-button");
  const dialog = document.querySelector("#edit-profile") as any;

  if (editProfileButton && dialog) {
    editProfileButton.addEventListener("click", () => {
      dialog.open = true;
    });
  }
</script>

<style>
  .card {
    padding: 1.5em;
    gap: 1em;
  }

  .badge {
    font-size: 0.6em;
    padding: 5px 12px;
    color: var(--md-sys-color-on-primary-container);
    background-color: var(--md-sys-color-primary-container);
    border-radius: 999px;
  }

  .name {
    font-size: 1.5em;
    font-weight: 600;
    text-wrap: pretty;
    text-align: center;
  }

  .school{
    font-size: 1.1em;
    font-weight: 600;
  }

  .details{
    font-size: 0.7em;
  }
  .data {
    gap: 0.5em;
  }

  .avatar {
    border-radius: 50%;
    border: 2px solid var(--md-sys-color-outline-variant);
  }
  md-text-button {
    font-family: "Open Sans Variable", sans-serif;
  }

[data-icon]{
  color: inherit;
}

</style>
```

---

`src\components\Form.astro`:
```
---
// src/components/Form.astro
import { Icon } from "astro-icon/components";

interface Props {
    userName?: string;
    userSchool?: string;
    userPhone?: string;
    userIsParticipant?: boolean;
    userIsVisible?: boolean;
}

const {
    userName = "",
    userSchool = "",
    userPhone = "",
    userIsParticipant = false,
    userIsVisible = false,
} = Astro.props;
---

<md-dialog class="dialog" id="edit-profile">
    <div slot="headline">
        <Icon name="material-symbols:edit-square-rounded" /> Edit Profil
    </div>

    <form slot="content" id="form-id" method="dialog">
        <md-outlined-text-field
            label="Nama Lengkap"
            required
            minlength="4"
            value={userName}
            name="name"><Icon name="material-symbols:person-rounded" slot="leading-icon" /></md-outlined-text-field>
        <md-outlined-text-field
            label="Universitas/Sekolah"
            required
            minlength="4"
            value={userSchool}
            name="school"><Icon name="material-symbols:school-rounded" slot="leading-icon" /></md-outlined-text-field>
        <md-outlined-text-field
            label="Nomor Telefon"
            required
            minlength="4"
            type="tel"
            value={userPhone}
            name="phone"><Icon name="material-symbols:phone-in-talk-rounded" slot="leading-icon" /></md-outlined-text-field>

        <label class="competition-checkbox">
            <md-checkbox
                name="is_participant"
                touch-target="wrapper"
                checked={userIsParticipant}
                value="true"
                disabled={userIsParticipant}
            ></md-checkbox>
            <span>Partisipasi dalam <strong>Kompetisi Faraid 2025</strong>
        </label>

        <label>
            <md-checkbox
                name="is_visible"
                touch-target="wrapper"
                checked={userIsVisible}
                value="true"
            >
            </md-checkbox><span>Tampilkan nama Anda di daftar peserta</span>
        </label>
    </form>

    <div slot="actions">
        <md-filled-button form="form-id" id="submit-button"
            >SIMPAN</md-filled-button
        >
    </div>
</md-dialog>

<script>
    import "material/textfield/outlined-text-field";
    import "material/button/filled-button";
    import "material/dialog/dialog";
    import "material/checkbox/checkbox";

    const submitButton = document.getElementById("submit-button");
    const form = document.getElementById("form-id") as HTMLFormElement;
    const dialog = document.querySelector("#edit-profile") as any;

    const submitProfileForm = async (event: Event) => {
        event.preventDefault();

        const name = (form.querySelector('[name="name"]') as HTMLInputElement)
            .value;
        const school = (
            form.querySelector('[name="school"]') as HTMLInputElement
        ).value;
        const phone = (form.querySelector('[name="phone"]') as HTMLInputElement)
            .value;
        const isParticipant =
            (form.querySelector('[name="is_participant"]') as HTMLInputElement)
                ?.checked || false;
        const isVisible =
            (form.querySelector('[name="is_visible"]') as HTMLInputElement)
                ?.checked || false;

        if (!form.checkValidity()) {
            form.reportValidity();
            return;
        }

        try {
            const response = await fetch("/api/profile", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify({
                    name,
                    school,
                    phone,
                    is_participant: isParticipant,
                    is_visible: isVisible,
                }),
            });

            if (!response.ok) {
                const errorData = await response.json();
                alert(
                    `Error updating profile: ${errorData.error} - ${errorData.details}`,
                );
                return;
            }

            dialog.close();
            window.location.reload();
        } catch (error) {
            console.error("Error updating profile:", error);
            alert("An unexpected error occurred.");
        }
    };

    if (submitButton) {
        submitButton.addEventListener("click", submitProfileForm);
    }
</script>

<style>
    .dialog {
        display: flex;
        flex-direction: column;
        margin: auto;
        height: min-content;
        position: absolute;
    }

    #form-id {
        display: flex;
        flex-direction: column;
        gap: 1em;
    }

    label{
        display: flex;
        align-items: center;
        gap: 0.5em;
    }

    label span strong {
        display: inline;
        text-wrap: pretty;
    }

    label{
        padding: 5px;
    }

    .competition-checkbox{
        padding: 5px;
        background-color: var(--md-sys-color-primary-container);
        color: var(--md-sys-color-on-primary-container);
        border-radius: 8px;
    }
</style>
```

---

`src\env.d.ts`:
```
// env.d.ts
declare namespace App {
  interface Locals {
    email: string;
    name: string;
    avatar_url: string;
    userId: string;
    createdAt: string;
    school: string | undefined;
    phone: string | undefined;
    is_participant: boolean | undefined;
    is_visible: boolean | undefined;
  }
}
```

---

`src\pages\api\profile.ts`:
```
// src/pages/api/profile.ts
import type { APIRoute } from "astro";
import { supabase } from "../../lib/supabase";
import { handleRequestError, handleAuthError } from "../../lib/apiHelpers";

export const POST: APIRoute = async ({ request, locals }) => {
  if (!locals.userId) {
    return new Response(JSON.stringify({ error: "Unauthorized" }), {
      status: 401,
      headers: { "Content-Type": "application/json" },
    });
  }

  try {
    const requestData = await request.json();

    const name = 'name' in requestData ? requestData.name : locals.name;
    const school = 'school' in requestData ? requestData.school : locals.school;
    const phone = 'phone' in requestData ? requestData.phone : locals.phone;
    const is_participant = 'is_participant' in requestData ? requestData.is_participant : locals.is_participant;
    const is_visible = 'is_visible' in requestData ? requestData.is_visible : locals.is_visible;

    const { error } = await supabase.auth.updateUser({
      data: {
        name: name,
        school: school,
        phone: phone,
        is_participant: is_participant,
        is_visible: is_visible,
      },
    });

    if (error) {
      return handleAuthError(error, "Failed to update profile");
    }

    return new Response(JSON.stringify({ success: true }), {
      status: 200,
      headers: { "Content-Type": "application/json" },
    });
  } catch (error) {
     return handleRequestError(error, "Invalid request body");
  }
};
```

---

`src\pages\dashboard.astro`:
```
---
// src/pages/dashboard.astro
import Form from "../components/Form.astro"
import Base from "../layout/Base.astro";
import Profile from "../components/Profile.astro";
const { name, school, phone, is_participant, is_visible } = Astro.locals;
---

<Base title="Dashboard">
<Profile />
  <md-text-button class="logout" href="/api/auth/signout">KELUAR</md-text-button>
<Form userName={name} userSchool={school} userPhone={phone} userIsParticipant={is_participant} userIsVisible={is_visible}></Form>
</Base>

<script>
import "material/dialog/dialog";
import "material/button/text-button";
</script>

<style>
md-text-button{
    font-family: 'Open Sans Variable', sans-serif;
    --md-text-button-label-text-color: var(--md-sys-color-error);
}
</style>
```

---