---
import { Icon } from "astro-icon/components";
import Countdown from "./Countdown.astro";
import LoginWithGoogleButton from './LoginWithGoogleButton.astro';

interface Props {
    isLoggedIn: boolean;
    isParticipant?: boolean;
}

const { isLoggedIn, isParticipant = false } = Astro.props;
---

<md-outlined-card class="card col" id="competition-card">
        <Icon id="close-button" class="close-button" name="material-symbols:close-rounded" size="1em" />
    <div class="main col">
        <Icon name="trophy2" size="3em" />
        Faraid Competition 2025
    </div>
    <div class="col">
        <p>Pendaftaran ditutup dalam:</p>
        <Countdown targetTime="June 25, 2025 00:00:00 GMT+0000" />
    </div>
    {
        isLoggedIn ? (
            isParticipant ? (
                <md-filled-button href="/competition">VIEW COMPETITION</md-filled-button>
            ) : (
                <md-filled-button id="announcement-join-button">JOIN COMPETITION</md-filled-button>
            )
        ) : (
            <LoginWithGoogleButton buttonType="filled" buttonText="JOIN" />
        )
    }
</md-outlined-card>

<script>
    import "material/button/filled-button";
    import "material/card/outlined-card";
    import "material/card/elevated-card";
    import "material/card/filled-card";

    document.addEventListener('DOMContentLoaded', () => {
        const closeButton = document.getElementById("close-button");
        const card = document.getElementById("competition-card");
        const joinButton = document.getElementById("announcement-join-button");
        if (closeButton && card) {
            closeButton.addEventListener("click", () => {
                card.style.display = card.style.display === "none" ? "" : "none";
            });
        }
        if (joinButton) {
            joinButton.addEventListener("click", async (e) => {
                e.preventDefault();
                (joinButton as HTMLButtonElement).disabled = true;
                try {
                    const response = await fetch("/api/profile", {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify({ is_participant: true })
                    });
                    if (!response.ok) {
                        const errorData = await response.json();
                        alert(errorData.error || "Failed to join competition");
                        (joinButton as HTMLButtonElement).disabled = false;
                        return;
                    }
                    window.location.href = "/competition";
                } catch (err) {
                    alert("An unexpected error occurred.");
                    (joinButton as HTMLButtonElement).disabled = false;
                }
            });
        }
    });

</script>

<style>
    .card {
        position: relative;
        padding: 1em;
        font-size: 1.3em;
        text-align: center;
        gap: 0.5em;
        font-weight: 500;
        backdrop-filter: blur(1px);
        max-width: 90%;
        min-width: 80%;
        justify-content: space-between;
        --_container-shape: 28px;
        --_container-color: var(--md-sys-color-surface-variant);
        backdrop-filter: blur(4px);
    }

    .main {
        gap: 0.5em;
        font-weight: 600;
    }

    .card > .col p {
        font-size: 0.5em;
        opacity: 0.5;
    }

    .close-button {
        position: absolute;
        top: 0.7em;
        right: 0.7em;
        background: none;
        border: none;
        cursor: pointer;
        padding: 0;
        z-index: 10;
        color: var(--md-sys-color-on-surface-variant);
        opacity: 0.5;
    }

    @media (min-width: 600px) {
        .card {
            flex-direction: row;
            align-items: center;
            gap: 1em;
        }

        .main {
            flex-direction: row;
            align-items: center;
        }
    }
</style>