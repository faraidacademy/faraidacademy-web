---
// src/components/Form.astro
interface Props {
  userName?: string;
  userSchool?: string;
  userPhone?: string;
}

const { userName = "", userSchool = "", userPhone = "" } = Astro.props; // Destructure with a default value
---

<md-dialog class="dialog" id="edit-profile">
    <div slot="headline">Edit Profil</div>
    <form slot="content" id="form-id" method="dialog">
        <md-outlined-text-field
            label="Nama Lengkap"
            required
            minlength="4"
            value={userName}
            id="name-input"
        ></md-outlined-text-field>
        <md-outlined-text-field
            label="Universitas/Sekolah"
            required
            minlength="4"
            placeholder="Universitas Islam"
            value={userSchool}
            id="school-input"
        ></md-outlined-text-field>
        <md-outlined-text-field
            label="Nomor Telefon"
            required
            minlength="4"
            type="tel"
            placeholder="62800"
            value={userPhone}
            id="phone-input"
        ></md-outlined-text-field>
        <div id="form-message"></div>
    </form>
    <div slot="actions">
        <md-filled-button form="form-id">SIMPAN</md-filled-button>
    </div>
</md-dialog>

<script>
    import "material/textfield/outlined-text-field";
    import "material/button/filled-button";
    import "material/dialog/dialog";

    const form = document.getElementById("form-id") as HTMLFormElement;
    const dialog = document.querySelector("#edit-profile") as any;
    const formMessage = document.getElementById("form-message")!;


    form.addEventListener("submit", async (event) => {
        // Prevent the default dialog-closing behavior.
        event.preventDefault();

        const nameInput = document.getElementById("name-input") as HTMLInputElement;
        const schoolInput = document.getElementById("school-input") as HTMLInputElement;
        const phoneInput = document.getElementById("phone-input") as HTMLInputElement;

        const name = nameInput.value;
        const school = schoolInput.value;
        const phone = phoneInput.value;

        try {
            const response = await fetch("/api/profile", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify({ name, school, phone }),
            });

            if (response.ok) {
                // Success!
                formMessage.textContent = "Profile updated successfully!";
                formMessage.style.color = "green";
                 // Update Profile.astro
                const profileSection = document.querySelector("section");
                if(profileSection){
                    const profileName = profileSection.querySelector("p");
                    if (profileName) {
                      profileName.textContent = name; // Update only the name
                    }
                }


                setTimeout(() => {
                  dialog.close(); // Close the dialog
                  formMessage.textContent = "";
                }, 1500); // close the form after 1.5s

            } else {
                // Handle errors (e.g., from the API).
                const errorData = await response.json();
                formMessage.textContent = `Error: ${errorData.error}`;
                formMessage.style.color = "red";
            }
        } catch (error) {
            console.error("Error updating profile:", error);
            formMessage.textContent = "An unexpected error occurred.";
            formMessage.style.color = "red";
        }
    });
</script>

<style>
    .dialog {
        display: flex;
        flex-direction: column;
        margin: auto;
        height:min-content;

    }

    #form-id {
        display: flex;
        flex-direction: column;
        gap:1em;
    }
</style>