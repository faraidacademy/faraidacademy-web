---
interface Props {
  targetTime: string;
  format?: "dhms" | "colon";
  labels?: {
    days?: string;
    hours?: string;
    minutes?: string;
    seconds?: string;
    finished?: string;
    space?: string; // For space between number and unit, default " "
  };
}

const { targetTime, format = "dhms", labels = {} } = Astro.props;

const targetDate: Date = new Date(targetTime);
const targetTimestamp: number = targetDate.getTime();

if (isNaN(targetTimestamp)) {
  console.error("Invalid targetTime prop:", targetTime);
}

// Refactored for clarity: label/colon logic is now more readable and commented
const defaultLabels = {
  days: format === "colon" ? ":" : "d", // Colon format uses ':' as separator
  hours: format === "colon" ? ":" : "h",
  minutes: format === "colon" ? ":" : "m",
  seconds: format === "colon" ? "" : "s",  // Colon format, seconds has no trailing unit/separator
  finished: "Countdown finished!",
  space: " ",
};

// Merge provided labels with defaults
const currentLabels = {
  days: labels.days ?? defaultLabels.days,
  hours: labels.hours ?? defaultLabels.hours,
  minutes: labels.minutes ?? defaultLabels.minutes,
  seconds: labels.seconds ?? defaultLabels.seconds,
  finished: labels.finished ?? defaultLabels.finished,
  space: labels.space ?? defaultLabels.space,
};

// Colon format: always use ':' as separator unless overridden
const colonSeparators = {
  days: format === "colon" ? (labels.days ?? ":") : currentLabels.days,
  hours: format === "colon" ? (labels.hours ?? ":") : currentLabels.hours,
  minutes: format === "colon" ? (labels.minutes ?? ":") : currentLabels.minutes,
  seconds: format === "colon" ? (labels.seconds ?? "") : currentLabels.seconds,
};


---

{ !isNaN(targetTimestamp) && (
  <p
    class="countdown"
    data-target={targetTimestamp}
    data-format={format}
    data-label-days={format === "colon" ? colonSeparators.days : currentLabels.days}
    data-label-hours={format === "colon" ? colonSeparators.hours : currentLabels.hours}
    data-label-minutes={format === "colon" ? colonSeparators.minutes : currentLabels.minutes}
    data-label-seconds={format === "colon" ? colonSeparators.seconds : currentLabels.seconds}
    data-label-finished={currentLabels.finished}
    data-label-space={currentLabels.space}
  >
    <span class="countdown-text"></span>
  </p>
)}

<style>
  .countdown {
    font-size: 0.7em;
  }
</style>

<script>
  function updateCountdown(countdownElement: HTMLParagraphElement) {
    if (!countdownElement) {
      return;
    }

    const targetTimestamp = parseInt(countdownElement.dataset.target || '0', 10);
    const countdownTextSpan = countdownElement.querySelector('.countdown-text') as HTMLSpanElement;
    const format = countdownElement.dataset.format || "dhms";

    // Retrieve labels from data attributes
    const labelDays = countdownElement.dataset.labelDays || (format === "colon" ? ":" : "d");
    const labelHours = countdownElement.dataset.labelHours || (format === "colon" ? ":" : "h");
    const labelMinutes = countdownElement.dataset.labelMinutes || (format === "colon" ? ":" : "m");
    const labelSeconds = countdownElement.dataset.labelSeconds || (format === "colon" ? "" : "s");
    const labelFinished = countdownElement.dataset.labelFinished || 'Countdown finished!';
    const labelSpace = countdownElement.dataset.labelSpace || " ";


    if (!countdownTextSpan) { // Added a check for countdownTextSpan
        console.error("Countdown text span not found in", countdownElement);
        return;
    }

    if (isNaN(targetTimestamp)) {
      console.error("Invalid targetTimestamp:", countdownElement.dataset.target);
      countdownTextSpan.textContent = 'Invalid date';
      return;
    }

    const now: number = new Date().getTime();
    const timeLeft: number = targetTimestamp - now;

    if (timeLeft <= 0) {
      countdownTextSpan.textContent = labelFinished;
      const existingTimeoutId = parseInt(countdownElement.dataset.timeoutId || '0', 10);
      if (existingTimeoutId) {
        clearTimeout(existingTimeoutId);
        delete countdownElement.dataset.timeoutId; // Clean up
      }
      return;
    }

    const days: number = Math.floor(timeLeft / (1000 * 60 * 60 * 24));
    const hours: number = Math.floor((timeLeft % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
    const minutes: number = Math.floor((timeLeft % (1000 * 60 * 60)) / (1000 * 60));
    const seconds: number = Math.floor((timeLeft % (1000 * 60)) / 1000);

    let countdownString: string = "";

    if (format === "colon") {
      if (days > 0) {
        countdownString += `${days}${labelDays}`;
      }
      if (days > 0 || hours > 0) {
        countdownString += `${String(hours).padStart(2, '0')}${labelHours}`;
      }
      countdownString += `${String(minutes).padStart(2, '0')}${labelMinutes}`;
      countdownString += `${String(seconds).padStart(2, '0')}${labelSeconds}`;
    } else { // dhms format
       if (days > 0) {
          countdownString += `${days}${labelSpace}${labelDays}${labelSpace}`;
        }
        if (days > 0 || hours > 0) {
          countdownString += `${hours}${labelSpace}${labelHours}${labelSpace}`;
        }
        if (days > 0 || hours > 0 || minutes > 0) {
          countdownString += `${minutes}${labelSpace}${labelMinutes}${labelSpace}`;
        }
        countdownString += `${seconds}${labelSpace}${labelSeconds}`;
        countdownString = countdownString.trim();
    }

    countdownTextSpan.textContent = countdownString;
    const timeoutId = setTimeout(() => updateCountdown(countdownElement), 1000);
    countdownElement.dataset.timeoutId = String(timeoutId);
  }

  function initializeCountdowns() {
      const countdownElements = document.querySelectorAll('.countdown');
      countdownElements.forEach(element => {
        // --- THIS IS THE FIX ---
        const countdownElement = element as HTMLParagraphElement; // Cast to specific HTMLElement
        // --- END FIX ---

        // Clear any previous timeout if the element is being re-initialized
        const existingTimeoutId = parseInt(countdownElement.dataset.timeoutId || '0', 10);
        if (existingTimeoutId) {
            clearTimeout(existingTimeoutId);
            delete countdownElement.dataset.timeoutId; // Clean up dataset property
        }
        updateCountdown(countdownElement); // No need to cast again here
      });
  }

  document.addEventListener('astro:page-load', initializeCountdowns);
  // If using Astro View Transitions, also listen for astro:after-swap for MPA-like behavior
  // document.addEventListener('astro:after-swap', initializeCountdowns);
</script>