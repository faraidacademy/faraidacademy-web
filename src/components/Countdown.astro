---
interface Props {
  targetTime: string;
  format?: "dhms" | "colon";
}

const { targetTime, format = "dhms" } = Astro.props;

const targetDate: Date = new Date(targetTime);
const targetTimestamp: number = targetDate.getTime();

if (isNaN(targetTimestamp)) {
  console.error("Invalid targetTime prop:", targetTime);
}

---

{ !isNaN(targetTimestamp) && (
  <p class="countdown" data-target={targetTimestamp} data-format={format}>
    <span class="countdown-text"></span>
  </p>
)}

<style>
  .countdown {
    font-size: 0.7em;
  }
</style>

<script>
  function updateCountdown(countdownElement: HTMLParagraphElement) {
      if (!countdownElement) {
        return;
      }

    const targetTimestamp = parseInt(countdownElement.dataset.target || '0', 10);
    const countdownTextSpan = countdownElement.querySelector('.countdown-text') as HTMLSpanElement;
    const format = countdownElement.dataset.format || "dhms";

    if (isNaN(targetTimestamp)) {
          console.error("Invalid targetTimestamp:", countdownElement.dataset.target);
          countdownTextSpan.textContent = 'Invalid date';
          return;
    }

    const now: number = new Date().getTime();
    const timeLeft: number = targetTimestamp - now;

    if (timeLeft <= 0) {
      countdownTextSpan.textContent = 'Countdown finished!';
      return;
    }

    const days: number = Math.floor(timeLeft / (1000 * 60 * 60 * 24));
    const hours: number = Math.floor((timeLeft % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
    const minutes: number = Math.floor((timeLeft % (1000 * 60 * 60)) / (1000 * 60));
    const seconds: number = Math.floor((timeLeft % (1000 * 60)) / 1000);

    let countdownString: string = "";

    if (format === "colon") {
      if (days > 0) {
        countdownString += `${days}:`;
      }
      if (days > 0 || hours > 0) {
        countdownString += `${String(hours).padStart(2, '0')}:`;
      }
      countdownString += `${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;
    } else { // dhms format
       if (days > 0) {
          countdownString += `${days}d `;
        }
        if (days > 0 || hours > 0) {
          countdownString += `${hours}h `;
        }
        if (days > 0 || hours > 0 || minutes > 0) {
          countdownString += `${minutes}m `;
        }
        countdownString += `${seconds}s`;
    }



    countdownTextSpan.textContent = countdownString;
    setTimeout(() => updateCountdown(countdownElement), 1000);
  }


  document.addEventListener('astro:page-load', () => {
      const countdownElements = document.querySelectorAll('.countdown');
      countdownElements.forEach(countdownElement => {
        updateCountdown(countdownElement as HTMLParagraphElement);
      });
  });
</script>