---
import { Icon } from "astro-icon/components";
import { Image } from "astro:assets";
const { email, name, avatar_url, createdAt, school, phone, is_participant, is_visible } = Astro.locals;

function formatDate(dateString: string | undefined) {
  if (!dateString) {
    return "Unknown";
  }
  const date = new Date(dateString);
  return date.toLocaleDateString("id-ID", {
    weekday: "long",
    year: "numeric",
    month: "long",
    day: "numeric",
  });
}
---

<md-elevated-card class="card col">
  <div class="main col">
  {
    avatar_url && (
      <Image
        class="avatar"
        src={avatar_url}
        alt={name ? `${name}'s avatar` : "User Avatar"}
        width={64}
        height={64}
      />
    )
  }

  <div class="name-badge col">
    <p class="name">{name || email}</p>
    {is_participant && (
      <div class="badge row data">
        <Icon name="material-symbols:verified-rounded" size="1.2em" /> Peserta Kompetisi
        Faraid 2025
      </div>
    )}
  </div>
</div>

  <div class="details col">
    {
      school && (
        <p class="data school row">
          <Icon name="material-symbols:school-rounded" /> {school}
        </p>
      )
    }
    {
      phone && (
        <p class="data row">
          <Icon name="material-symbols:phone-forwarded-rounded" /> {phone}
        </p>
      )
    }
    
    <p class="data row">
      <Icon name="material-symbols:person-rounded" />
      {formatDate(createdAt)}
    </p>
    {
      !is_participant && (
        <md-filled-button id="join-competition-profile-button">
          Join Faraid Competition 2025
        </md-filled-button>
      )
    }
  </div>

  <md-text-button id="edit-profile-button"><Icon slot="icon" name="material-symbols:edit-square-rounded" /> EDIT PROFIL</md-text-button>
</md-elevated-card>

<script>
  import "material/button/text-button";
  import "material/button/filled-button";
  import "material/card/elevated-card";

  const editProfileButton = document.getElementById("edit-profile-button");
  const dialog = document.querySelector("#edit-profile") as any;

  if (editProfileButton && dialog) {
    editProfileButton.addEventListener("click", () => {
      if (typeof dialog.show === 'function') {
        dialog.show();
      } else {
        dialog.open = true;
      }
    });
  }

  document.addEventListener("astro:page-load", () => {
    const joinButton = document.getElementById("join-competition-profile-button");
    if (joinButton) {
      joinButton.addEventListener("click", async (e) => {
        e.preventDefault();
        (joinButton as HTMLButtonElement).disabled = true;
        try {
          const response = await fetch("/api/profile", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ is_participant: true })
          });
          if (!response.ok) {
            const errorData = await response.json();
            alert(errorData.error || "Failed to join competition");
            (joinButton as HTMLButtonElement).disabled = false;
            return;
          }
          window.location.reload();
        } catch (err) {
          alert("An unexpected error occurred.");
          (joinButton as HTMLButtonElement).disabled = false;
        }
      });
    }
  });
</script>

<style>
  .card {
    padding: 1.5em;
    gap: 1em;
  }

  .badge {
    font-size: 0.6em;
    padding: 5px 12px;
    color: var(--md-sys-color-on-primary-container);
    background-color: var(--md-sys-color-primary-container);
    border-radius: 999px;
  }

  .name {
    font-size: 1.5em;
    font-weight: 600;
    text-wrap: pretty;
    text-align: center;
  }

  .school{
    font-size: 1.1em;
    font-weight: 600;
  }

  .details{
    font-size: 0.7em;
  }
  .data {
    gap: 0.5em;
  }

  .avatar {
    border-radius: 50%;
    border: 2px solid var(--md-sys-color-outline-variant);
  }
  md-text-button {
    font-family: "Open Sans Variable", sans-serif;
  }

  #join-competition-profile-button {
    margin-top: 1em;
  }

[data-icon]{
  color: inherit;
}

</style>