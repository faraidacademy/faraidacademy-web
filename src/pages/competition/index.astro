---
import Base from "../../layout/Base.astro";
import { Icon } from "astro-icon/components";
import Countdown2 from "../../components/Countdown2.astro";
import { Content as CompetitionGuideContent, frontmatter as guideFrontmatter } from "../../content/guides/competition-guide.md";

const competitionStartDate = "2025-06-17T11:00:00Z";
---

<Base title="Faraid Competition">
  <main class="col">
    <section class="competition-main-page col">
      <Icon name="trophy2" size="3em" />
      <h1>Faraid Competition<wbr /> 2025</h1>

      <div class="start-info col">
        <p>Akan dimulai dalam:</p>
        <div class="countdown-wrapper">
          <Countdown2 targetTime={competitionStartDate} />
        </div>

        <div class="start-time-details" data-start-date={competitionStartDate}>
          <p class="date-info-line">
            <Icon name="material-symbols:calendar-month-rounded" size="1.1em" />
            <span class="local-date-text">Memuat tanggal...</span>
          </p>
          <p class="time-info-line">
            <Icon name="material-symbols:schedule-outline-rounded" size="1.1em" />
            <span class="local-time-text start-time-clock">Memuat waktu...</span>
          </p>
        </div>
      </div>

      <div class="actions row">
        <md-outlined-button id="open-guides-dialog">
          <Icon name="material-symbols:help-outline-rounded" slot="icon" />
          Info & Panduan
        </md-outlined-button>

        <md-filled-button href="/competition/1" trailing-icon>
          Mulai
          <Icon name="material-symbols:play-arrow-rounded" slot="icon" />
        </md-filled-button>
      </div>
    </section>

    <md-dialog id="guides-dialog">
      <div slot="headline" class="row dialog-headline">
        <Icon name="material-symbols:menu-book-rounded" size="1.2em" />
        {guideFrontmatter.title}
      </div>
      <div slot="content" id="guides-content" class="col">
        <CompetitionGuideContent />
      </div>
      <div slot="actions">
        <md-text-button id="close-guides-dialog" value="close">
          Tutup
        </md-text-button>
      </div>
    </md-dialog>
  </main>
</Base>
<style is:global>
  .countdown-container{
    gap:2em;
  }
</style>
<style>
  [data-icon="material-symbols:play-arrow-rounded"] {
    color: var(--md-sys-color-on-primary);
  }

  main.col {
    padding-top: 2em;
    padding-bottom: 2em;
    gap: 2em;
    width: 100%;
  }
  h1 {
    text-wrap: pretty;
    font-size: 1.1em;
  }
  .start-info {
    gap: 0.75em;
    margin-bottom: 1em;
  }

 .start-info[data-astro-cid-zptrxzxo]>p[data-astro-cid-zptrxzxo]:first-child {
    margin-bottom: 0;
    font-size: 0.8em;
    color: var(--md-sys-color-on-surface-variant);
}

  .start-time-details {
    font-size:0.8em;
    display: flex;
    flex-direction: row;
    align-items: center;
    gap: 1em;
    width: 100%;
    justify-content: center;
  }

  .date-info-line,
  .time-info-line {
    display: flex;
    flex-direction: row;
    align-items: center;
    justify-content: center;
    gap: 0.2em;
    font-size: 0.9em;
    color: var(--md-sys-color-on-surface-variant);
    opacity: 0.9;
    margin: 0;
  }

  .actions {
    gap: 1em;
    justify-content: center;
    flex-wrap: wrap;
    margin-top: 1em;
  }

  md-outlined-button,
  md-filled-button {
    min-width: 160px;
    --md-filled-button-label-text-font-weight: 500;
    --md-outlined-button-label-text-font-weight: 500;
  }

  #guides-dialog {
    margin: auto;
  }

  .dialog-headline {
    gap: 0.5em;
    align-items: center;
  }

  /* These styles should now apply to the content rendered from Markdown */
  #guides-dialog div[slot="content"] {
    gap: 0.8em;
    padding-top: 0.5em;
    padding-bottom: 1em;
  }

  /*
    You might need to adjust these selectors slightly if the Markdown
    output structure is different, but Astro's default Markdown
    output typically wraps paragraphs in <p> tags.
  */
  #guides-dialog div[slot="content"] :global(p) { /* Use :global if styles are scoped */
    text-align: left;
    line-height: 1.6;
    font-size: 0.95em;
    color: var(--md-sys-color-on-surface-variant);
    margin-block-start: 0; /* Reset default paragraph margins if needed */
    margin-block-end: 0.8em; /* Or keep your gap for spacing */
  }
  #guides-dialog div[slot="content"] :global(p:last-child) {
    margin-block-end: 0;
  }

  #guides-dialog div[slot="content"] :global(strong) {
    color: var(--md-sys-color-on-surface);
    font-weight: 600;
  }
</style>

<script>
  // Your existing script remains the same
  import "material/dialog/dialog.js";
  import "material/button/outlined-button.js";
  import "material/button/filled-button.js";
  import "material/button/text-button.js";

  type DialogLikeElement = HTMLElement & {
    open?: boolean;
    show?: () => void;
    showModal?: () => void;
    close: (reason?: string) => void;
    returnValue?: string;
  };

  function formatUTCDateToLocalParts(utcDateString: string):
    { datePart: string; timePart: string } |
    { error: string }
  {
    const date = new Date(utcDateString);
    if (isNaN(date.getTime())) {
      return { error: "Invalid date" };
    }

    const dateOptions: Intl.DateTimeFormatOptions = {
      weekday: 'long',
      year: 'numeric',
      month: 'long',
      day: 'numeric',
    };
    const datePart = date.toLocaleDateString('id-ID', dateOptions);

    const timeOptions: Intl.DateTimeFormatOptions = {
      hour: '2-digit',
      minute: '2-digit',
      hour12: false,
    };
    const timePart = date.toLocaleTimeString('en-GB', timeOptions); // Or 'id-ID' if you prefer localized time format for display

    return { datePart, timePart };
  }

  document.addEventListener("astro:page-load", () => {

    const guidesDialog = document.getElementById(
      "guides-dialog",
    ) as DialogLikeElement | null;
    const openGuidesButton = document.getElementById("open-guides-dialog");
    const closeGuidesButton = document.getElementById("close-guides-dialog");

    if (openGuidesButton && guidesDialog) {
      openGuidesButton.addEventListener("click", () => {
        if (typeof guidesDialog.show === "function") {
          guidesDialog.show();
        } else if (typeof guidesDialog.showModal === "function") {
          guidesDialog.showModal();
        } else {
          guidesDialog.open = true;
        }
      });
    }

    if (closeGuidesButton && guidesDialog) {
      closeGuidesButton.addEventListener("click", () => {
        if (typeof guidesDialog.close === "function") {
          guidesDialog.close();
        }
      });
    }

    const startTimeDetailsElement = document.querySelector<HTMLElement>(".start-time-details");

    if (startTimeDetailsElement) {
      const dateTextSpan = startTimeDetailsElement.querySelector<HTMLSpanElement>(".local-date-text");
      const timeTextSpan = startTimeDetailsElement.querySelector<HTMLSpanElement>(".local-time-text.start-time-clock");
      const utcDateString = startTimeDetailsElement.dataset.startDate;

      if (dateTextSpan && timeTextSpan) {
        if (utcDateString) {
          const result = formatUTCDateToLocalParts(utcDateString);
          if ('error' in result) {
            dateTextSpan.textContent = result.error;
            timeTextSpan.textContent = "Kesalahan waktu";
          } else {
            dateTextSpan.textContent = result.datePart;
            timeTextSpan.textContent = result.timePart;
          }
        } else {
          dateTextSpan.textContent = "Tanggal kompetisi tidak tersedia.";
          timeTextSpan.textContent = "";
          console.error("Attribute data-start-date tidak ditemukan pada .start-time-details");
        }
      } else {
        if (!dateTextSpan) console.error("Elemen .local-date-text tidak ditemukan dalam .start-time-details.");
        if (!timeTextSpan) console.error("Elemen .local-time-text.start-time-clock tidak ditemukan dalam .start-time-details.");
        // Avoid overwriting the whole container if only one part is missing, or handle more gracefully
        // For example, if startTimeDetailsElement has other important children.
        // startTimeDetailsElement.textContent = "Kesalahan dalam menampilkan waktu kompetisi.";
      }
    }
  });
</script>