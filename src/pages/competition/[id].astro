---
// src/pages/competition/[id].astro
import Base from "../../layout/Base.astro";
import { supabase } from "../../lib/supabase";
import type { Question, Answer } from "../../types";

const { id } = Astro.params;

if (!id || isNaN(Number(id))) {
    return Astro.redirect("/competition");
}

const questionId = Number(id);

const { data: questionData, error: questionError } = await supabase
    .from("questions")
    .select("*")
    .eq("id", questionId)
    .single();

if (questionError) {
    console.error(questionError);
    return new Response("Error fetching question", { status: 500 });
}

if (!questionData) {
    return Astro.redirect("/competition");
}

const { data: answersData, error: answersError } = await supabase
    .from("answers")
    .select("*")
    .eq("question_id", questionId);

if (answersError) {
    console.error(answersError);
    return new Response("Error fetching answers", { status: 500 });
}

const question: Question = questionData;
const answers: Answer[] = answersData || [];

const { count: totalQuestions, error: countError } = await supabase
    .from("questions")
    .select("*", { count: "exact", head: true });

if (countError) {
    console.error(countError);
    return new Response("Error fetching total questions number", {
        status: 500,
    });
}
const totalQuestionCount = totalQuestions ?? 0;

let userResult = null;
if (Astro.locals.userId) {
  const { data: resultData, error: resultError } = await supabase
    .from("results")
    .select("answer_id")
    .eq("user_id", Astro.locals.userId)
    .eq("question_id", questionId)
    .single();

  if (resultError && resultError.code !== 'PGRST116') {
    console.error("Error fetching user result:", resultError);
  } else if (resultData) {
      userResult = resultData.answer_id;
  }
}
---

<Base title={`Question ${questionId}`}>
    <section data-question-id={questionId}> {/* Add data-question-id here */}
        <h1>Question {questionId}</h1>
        <p>Case: {question.case}</p>
        {question.money && <p>Money: {question.money}</p>}
        <p>{question.question}</p>
        {question.fraction && <p>Fraction: {question.fraction}</p>}

        <h2>Answers</h2>
        <p>Status: <span id="status-indicator">unsaved</span></p>
        <ul>
            {
                answers.map((answer) => (
                    <li>
                        <button
                            data-answer-id={answer.id}
                            class={`answer-button ${userResult === answer.id ? 'selected' : ''}`}
                        >
                            {answer.answer}
                        </button>
                    </li>
                ))
            }
            <li>
              <button data-answer-id="null" class={`answer-button ${userResult === null ? 'selected' : ''}`}>
                    None of the Above
                </button>
            </li>
        </ul>

        <div class="navigation">
            {
                questionId > 1 && (
                    <a href={`/competition/${questionId - 1}`}>Previous</a>
                )
            }
            <span>Question: {questionId} / {totalQuestionCount}</span>
            {
                questionId < totalQuestionCount && (
                    <a href={`/competition/${questionId + 1}`}>Next</a>
                )
            }
        </div>
    </section>
</Base>

<script>
    const answerButtons = document.querySelectorAll<HTMLElement>(".answer-button");
    const statusIndicator = document.getElementById("status-indicator")!;

    // Get questionId from the data attribute.  Crucially, we get it *from the section*.
    const sectionElement = document.querySelector('section');
    const questionId = sectionElement ? parseInt(sectionElement.dataset.questionId || '', 10) : null;

    answerButtons.forEach((button) => {
        button.addEventListener("click", async () => {
            answerButtons.forEach((b) => b.classList.remove("selected"));
            button.classList.add("selected");
            statusIndicator.textContent = "unsaved";

            const answerId = button.dataset.answerId;
            // Correctly handle null/undefined answerId
            const parsedAnswerId = answerId === 'null' ? null : (answerId ? parseInt(answerId, 10) : null);


            if (questionId === null) {
                console.error("Question ID not found!");
                statusIndicator.textContent = "error"; // Indicate an error state
                return; // Stop execution if questionId is missing
            }

            // Handle the case where parsedAnswerId is null (from an invalid data-answer-id)
            if (parsedAnswerId === null && answerId !== 'null') {
                console.error("Invalid answer ID:", answerId);
                statusIndicator.textContent = "error";
                return; // Stop if the answer ID is invalid (not "null" but also not a number)
            }

            try {
                const response = await fetch("/api/answers", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                    },
                    body: JSON.stringify({
                        questionId: questionId,  // Now correctly using the questionId
                        answerId: parsedAnswerId,
                    }),
                });

                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.error || "Failed to save answer");
                }

                statusIndicator.textContent = "saved";
            } catch (error) {
                console.error("Error saving answer:", error);
                statusIndicator.textContent = "error";
            }
        });
    });
</script>
<style>
    .navigation {
        display: flex;
        justify-content: space-between;
        margin-top: 2rem;
    }

    .answer-button {
        margin-bottom: 0.5rem;
        padding: 0.5rem 1rem;
        border: 1px solid #ccc;
        border-radius: 4px;
        background-color: #f0f0f0;
        cursor: pointer;
    }

    .answer-button.selected {
        background-color: #a0c4ff;
        border-color: #68a0ff;
        color: black;
    }
</style>