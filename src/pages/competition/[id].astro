---
import Base from "../../layout/Base.astro";
import { supabase } from "../../lib/supabase";
import type { Question, Answer } from "../../types";
import { Icon } from "astro-icon/components";
import "../../styles/light.css";  // Import light theme
import "../../styles/dark.css";   // Import dark theme
const { id } = Astro.params;

if (!id || isNaN(Number(id))) {
  return Astro.redirect("/404");
}

const questionId = Number(id);

const { data: questionData, error: questionError } = await supabase
  .from("questions")
  .select("id, question, money, case")
  .eq("id", questionId)
  .single();

if (questionError) {
  return Astro.redirect("/404");
}

if (!questionData) {
  return Astro.redirect("/404");
}

const { data: answersData, error: answersError } = await supabase
  .from("answers")
  .select("id, question_id, answer")
  .eq("question_id", questionId);

if (answersError) {
  return Astro.redirect("/404");
}

function shuffleArray(array: any[]) {
  for (let i = array.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [array[i], array[j]] = [array[j], array[i]];
  }
}

const question: Question = questionData;
const answers: Answer[] = answersData || [];
shuffleArray(answers);

const totalQuestionCount = 47;

let userResult = undefined;
let userHasAnswered = false;

if (Astro.locals.userId) {
  const { data: resultExistsData, error: resultExistsError } = await supabase
    .from("results")
    .select("id")
    .eq("user_id", Astro.locals.userId)
    .eq("question_id", questionId)
    .single();

  if (resultExistsError && resultExistsError.code !== "PGRST116") {
    console.error("Error checking if user has answered:", resultExistsError);
  } else {
    userHasAnswered = !!resultExistsData;
  }

  if (userHasAnswered) {
    const { data: resultData, error: resultError } = await supabase
      .from("results")
      .select("answer_id")
      .eq("user_id", Astro.locals.userId)
      .eq("question_id", questionId)
      .single();

    if (resultError && resultError.code !== "PGRST116") {
      console.error("Error fetching user result:", resultError);
    } else if (resultData) {
      userResult = resultData.answer_id;
    }
  }
}

function formatNumber(num: number | null | undefined): string {
  if (num === null || num === undefined) {
    return "";
  }
  return num.toLocaleString("de-DE");
}

const formattedMoney = formatNumber(question.money);
---

<Base title={`Question ${questionId}`}>
  <md-elevated-card class="competition-card col">
    <section class="col" dir="rtl" data-question-id={questionId}>
      <md-filled-card class="question col" >
        <p>{question.question}</p>
        {formattedMoney && <p>التركة: Rp {formattedMoney}</p>}
        <p>السؤال: كم نصيب {question.case}؟</p>
      </md-filled-card>

      <div class="answers col">
        <div
          class="answers-list col"
          role="radiogroup"
          aria-label="Select an Answer"
        >
          {
            answers.map((answer) => (
              <div class="radio-group">
                <md-radio
                  id={`answer-${answer.id}`}
                  name="question-answers"
                  value={String(answer.id)}
                  checked={userResult === answer.id}
                  aria-label={answer.answer}
                />
                <label for={`answer-${answer.id}`}>
                  Rp {formatNumber(Number(answer.answer))}
                </label>
              </div>
            ))
          }
          <div class="radio-group null">
            <md-radio
              id="answer-null"
              name="question-answers"
              value="null"
              checked={userResult === null}
              aria-label="None of the Above"
            >
            </md-radio>
            <label for="answer-null">لا شيء مما سبق</label>
          </div>
        </div>
      </div>

      <div class="navigation">
        {
          questionId > 1 && (
            <md-filled-tonal-icon-button
              href={`/competition/${questionId - 1}`}
            >
              <Icon name="material-symbols:arrow-forward-rounded" size="2em" />
            </md-filled-tonal-icon-button>
          )
        }

        <p>
          <span id="status-indicator">
            {
              userHasAnswered ? (
                <>
                  <Icon name="material-symbols:check-circle-rounded" />
                  &nbsp;Tersimpan
                </>
              ) : (
                <>
                  <Icon name="material-symbols:warning-rounded" />
                  &nbsp;Belum Tersimpan
                </>
              )
            }
          </span>
        </p>
        {
          questionId < totalQuestionCount && (
            <md-filled-tonal-icon-button
              href={`/competition/${questionId + 1}`}
            >
              <Icon name="material-symbols:arrow-back-rounded" size="2em" />
            </md-filled-tonal-icon-button>
          )
        }
      </div>
    </section></md-elevated-card
  >
</Base>

<script>
  import "material/radio/radio";
  import "material/iconbutton/filled-tonal-icon-button";
  import "material/card/elevated-card";
  import "material/card/filled-card";

  document.addEventListener('astro:page-load', () => {
  const statusIndicator = document.getElementById("status-indicator")!;

  const sectionElement = document.querySelector("section");
  const questionId = sectionElement
    ? parseInt(sectionElement.dataset.questionId || "", 10)
    : null;

  async function submitAnswer(
    questionId: number | null,
    answerId: number | null | string,
  ) {
    if (questionId === null) {
      console.error("Question ID not found!");
      statusIndicator.textContent = "error";
      return;
    }

    const parsedAnswerId =
      answerId === "null"
        ? null
        : typeof answerId === "string"
          ? parseInt(answerId, 10)
          : answerId;

    if (parsedAnswerId === null && answerId !== "null") {
      console.error("Invalid answer ID:", answerId);
      statusIndicator.textContent = "error";
      return;
    }

    try {
      const response = await fetch("/api/answers", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          questionId: questionId,
          answerId: parsedAnswerId,
        }),
      });

      if (!response.ok) {
        const errorData = await response.json();
        const errorMessage = errorData.error || "Failed to save answer";
        throw new Error(errorMessage);
      }

      statusIndicator.textContent = "✅ Tersimpan";
      return true;
    } catch (error) {
      console.error("Error saving answer:", error);
      statusIndicator.textContent = "error";

      if (error instanceof Error) {
        alert(error.message);
      } else {
        alert("An unexpected error occurred.");
      }
      return false;
    }
  }

  const radioGroup = document.querySelector('[role="radiogroup"]');

  radioGroup?.addEventListener("change", async (event) => {
    const target = event.target as HTMLInputElement;

    if (target.tagName === "MD-RADIO") {
      statusIndicator.textContent = "⚠ Belum Tersimpan";
      await submitAnswer(questionId, target.value);
    }
  });});
</script>

<style is:global>
  body {
    background-image: none;
    background-color: var(--md-sys-color-surface);
  }
  body::before {
    display: none;
  }
</style>

<style lang="css">
  .competition-card {
    width: 90%;
    background-color: none;
    font-family: "Amiri", serif;
    padding: 1em;
  }

  section {
    width: 100%;
  }

  .question {
    gap: 1em;
    width: 100%;
    align-items: flex-start;
    padding: 1em;
  }

  .answers {
    width: 100%;
    align-items: flex-start;
    padding: 1em;
  }

  .navigation[data-astro-cid-t6c3q7ka] {
    display: flex;
    justify-content: space-between;
    width: 100%;
    align-items: center;
  }
  .answers-list {
    align-items: flex-start;
    gap: 0.8em;
  }

  .radio-group {
    display: flex;
    align-items: center;
    gap: 1em;
    font-family: "EB Garamond Variable", serif;
  }

  md-radio {
    display: inline-flex;
  }

  .null {
    font-family: "Amiri", serif;
  }

  #status-indicator {
    display: flex;
    align-items: center;
    color: var(--md-sys-color-on-surface);
    font-family: "Open Sans", sans-serif;
    font-size: 0.7em;
  }

  [data-icon="material-symbols:check-circle-rounded"] {
    color: var(--md-sys-color-primary);
  }

  [data-icon="material-symbols:warning-rounded"] {
    color: var(--md-sys-color-error);
  }

  @media (min-width: 600px) and (max-width: 839px) {
    .competition-card {
      font-size: 1.2em;
    }
  }

  @media (min-width: 840px) {
    .competition-card {
      font-size: 0.8em;
    }
  }
</style>
